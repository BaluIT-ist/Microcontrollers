
lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000258  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003e0  080003e0  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003e0  080003e0  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  080003e0  080003e0  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003e0  080003e0  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003e0  080003e0  000013e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003e4  080003e4  000013e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080003e8  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00002004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000eef  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004a9  00000000  00000000  00002f23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001b0  00000000  00000000  000033d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000012d  00000000  00000000  00003580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f46a  00000000  00000000  000036ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000021c9  00000000  00000000  00022b17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9d08  00000000  00000000  00024ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ee9e8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000004e8  00000000  00000000  000eea2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  000eef14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080003c8 	.word	0x080003c8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080003c8 	.word	0x080003c8

080001c8 <main>:
#include "stm32f3xx.h"

int main(void){
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0

	RCC->AHBENR |=(1UL<<18U)|(1UL<<17U);
 80001ce:	4b29      	ldr	r3, [pc, #164]	@ (8000274 <main+0xac>)
 80001d0:	695b      	ldr	r3, [r3, #20]
 80001d2:	4a28      	ldr	r2, [pc, #160]	@ (8000274 <main+0xac>)
 80001d4:	f443 23c0 	orr.w	r3, r3, #393216	@ 0x60000
 80001d8:	6153      	str	r3, [r2, #20]
	GPIOB->MODER=0X00055000;
 80001da:	4b27      	ldr	r3, [pc, #156]	@ (8000278 <main+0xb0>)
 80001dc:	f44f 22aa 	mov.w	r2, #348160	@ 0x55000
 80001e0:	601a      	str	r2, [r3, #0]
	//0x100-orange
	//0x200-green
	//0x000 all off
	//0x3C0 all on

int state = 0, prev = 0;
 80001e2:	2300      	movs	r3, #0
 80001e4:	60fb      	str	r3, [r7, #12]
 80001e6:	2300      	movs	r3, #0
 80001e8:	60bb      	str	r3, [r7, #8]

    while (1) {
        int now = GPIOA->IDR & 0x1;
 80001ea:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80001ee:	691b      	ldr	r3, [r3, #16]
 80001f0:	f003 0301 	and.w	r3, r3, #1
 80001f4:	607b      	str	r3, [r7, #4]
        if (now && !prev) {
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d00f      	beq.n	800021c <main+0x54>
 80001fc:	68bb      	ldr	r3, [r7, #8]
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d10c      	bne.n	800021c <main+0x54>
            state = (state + 1) % 5;
 8000202:	68fb      	ldr	r3, [r7, #12]
 8000204:	1c5a      	adds	r2, r3, #1
 8000206:	4b1d      	ldr	r3, [pc, #116]	@ (800027c <main+0xb4>)
 8000208:	fb83 1302 	smull	r1, r3, r3, r2
 800020c:	1059      	asrs	r1, r3, #1
 800020e:	17d3      	asrs	r3, r2, #31
 8000210:	1ac9      	subs	r1, r1, r3
 8000212:	460b      	mov	r3, r1
 8000214:	009b      	lsls	r3, r3, #2
 8000216:	440b      	add	r3, r1
 8000218:	1ad3      	subs	r3, r2, r3
 800021a:	60fb      	str	r3, [r7, #12]
        }
        prev = now;
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	60bb      	str	r3, [r7, #8]

        switch (state) {
 8000220:	68fb      	ldr	r3, [r7, #12]
 8000222:	2b04      	cmp	r3, #4
 8000224:	d8e1      	bhi.n	80001ea <main+0x22>
 8000226:	a201      	add	r2, pc, #4	@ (adr r2, 800022c <main+0x64>)
 8000228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800022c:	08000241 	.word	0x08000241
 8000230:	08000249 	.word	0x08000249
 8000234:	08000253 	.word	0x08000253
 8000238:	0800025d 	.word	0x0800025d
 800023c:	08000267 	.word	0x08000267
            case 0: GPIOB->ODR = 0x40; break;
 8000240:	4b0d      	ldr	r3, [pc, #52]	@ (8000278 <main+0xb0>)
 8000242:	2240      	movs	r2, #64	@ 0x40
 8000244:	615a      	str	r2, [r3, #20]
 8000246:	e013      	b.n	8000270 <main+0xa8>
            case 1: GPIOB->ODR = 0x140; break;
 8000248:	4b0b      	ldr	r3, [pc, #44]	@ (8000278 <main+0xb0>)
 800024a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800024e:	615a      	str	r2, [r3, #20]
 8000250:	e00e      	b.n	8000270 <main+0xa8>
            case 2: GPIOB->ODR = 0x1C0; break;
 8000252:	4b09      	ldr	r3, [pc, #36]	@ (8000278 <main+0xb0>)
 8000254:	f44f 72e0 	mov.w	r2, #448	@ 0x1c0
 8000258:	615a      	str	r2, [r3, #20]
 800025a:	e009      	b.n	8000270 <main+0xa8>
            case 3: GPIOB->ODR = 0x3C0; break;
 800025c:	4b06      	ldr	r3, [pc, #24]	@ (8000278 <main+0xb0>)
 800025e:	f44f 7270 	mov.w	r2, #960	@ 0x3c0
 8000262:	615a      	str	r2, [r3, #20]
 8000264:	e004      	b.n	8000270 <main+0xa8>
            case 4: GPIOB->ODR = 0x000; break;
 8000266:	4b04      	ldr	r3, [pc, #16]	@ (8000278 <main+0xb0>)
 8000268:	2200      	movs	r2, #0
 800026a:	615a      	str	r2, [r3, #20]
 800026c:	bf00      	nop
 800026e:	e7bc      	b.n	80001ea <main+0x22>
    while (1) {
 8000270:	e7bb      	b.n	80001ea <main+0x22>
 8000272:	bf00      	nop
 8000274:	40021000 	.word	0x40021000
 8000278:	48000400 	.word	0x48000400
 800027c:	66666667 	.word	0x66666667

08000280 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000284:	bf00      	nop
 8000286:	e7fd      	b.n	8000284 <NMI_Handler+0x4>

08000288 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800028c:	bf00      	nop
 800028e:	e7fd      	b.n	800028c <HardFault_Handler+0x4>

08000290 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000294:	bf00      	nop
 8000296:	e7fd      	b.n	8000294 <MemManage_Handler+0x4>

08000298 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800029c:	bf00      	nop
 800029e:	e7fd      	b.n	800029c <BusFault_Handler+0x4>

080002a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002a4:	bf00      	nop
 80002a6:	e7fd      	b.n	80002a4 <UsageFault_Handler+0x4>

080002a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002a8:	b480      	push	{r7}
 80002aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002ac:	bf00      	nop
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr

080002b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002b6:	b480      	push	{r7}
 80002b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002ba:	bf00      	nop
 80002bc:	46bd      	mov	sp, r7
 80002be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c2:	4770      	bx	lr

080002c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002c4:	b480      	push	{r7}
 80002c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002c8:	bf00      	nop
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr

080002d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002d2:	b580      	push	{r7, lr}
 80002d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002d6:	f000 f83f 	bl	8000358 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002da:	bf00      	nop
 80002dc:	bd80      	pop	{r7, pc}
	...

080002e0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002e4:	4b06      	ldr	r3, [pc, #24]	@ (8000300 <SystemInit+0x20>)
 80002e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002ea:	4a05      	ldr	r2, [pc, #20]	@ (8000300 <SystemInit+0x20>)
 80002ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002f4:	bf00      	nop
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	e000ed00 	.word	0xe000ed00

08000304 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000304:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800033c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000308:	f7ff ffea 	bl	80002e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800030c:	480c      	ldr	r0, [pc, #48]	@ (8000340 <LoopForever+0x6>)
  ldr r1, =_edata
 800030e:	490d      	ldr	r1, [pc, #52]	@ (8000344 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000310:	4a0d      	ldr	r2, [pc, #52]	@ (8000348 <LoopForever+0xe>)
  movs r3, #0
 8000312:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000314:	e002      	b.n	800031c <LoopCopyDataInit>

08000316 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000316:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000318:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800031a:	3304      	adds	r3, #4

0800031c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800031c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800031e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000320:	d3f9      	bcc.n	8000316 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000322:	4a0a      	ldr	r2, [pc, #40]	@ (800034c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000324:	4c0a      	ldr	r4, [pc, #40]	@ (8000350 <LoopForever+0x16>)
  movs r3, #0
 8000326:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000328:	e001      	b.n	800032e <LoopFillZerobss>

0800032a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800032a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800032c:	3204      	adds	r2, #4

0800032e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800032e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000330:	d3fb      	bcc.n	800032a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000332:	f000 f825 	bl	8000380 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000336:	f7ff ff47 	bl	80001c8 <main>

0800033a <LoopForever>:

LoopForever:
    b LoopForever
 800033a:	e7fe      	b.n	800033a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800033c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000340:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000344:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000348:	080003e8 	.word	0x080003e8
  ldr r2, =_sbss
 800034c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000350:	20000024 	.word	0x20000024

08000354 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000354:	e7fe      	b.n	8000354 <ADC1_2_IRQHandler>
	...

08000358 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800035c:	4b06      	ldr	r3, [pc, #24]	@ (8000378 <HAL_IncTick+0x20>)
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	461a      	mov	r2, r3
 8000362:	4b06      	ldr	r3, [pc, #24]	@ (800037c <HAL_IncTick+0x24>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4413      	add	r3, r2
 8000368:	4a04      	ldr	r2, [pc, #16]	@ (800037c <HAL_IncTick+0x24>)
 800036a:	6013      	str	r3, [r2, #0]
}
 800036c:	bf00      	nop
 800036e:	46bd      	mov	sp, r7
 8000370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop
 8000378:	20000000 	.word	0x20000000
 800037c:	20000020 	.word	0x20000020

08000380 <__libc_init_array>:
 8000380:	b570      	push	{r4, r5, r6, lr}
 8000382:	4d0d      	ldr	r5, [pc, #52]	@ (80003b8 <__libc_init_array+0x38>)
 8000384:	4c0d      	ldr	r4, [pc, #52]	@ (80003bc <__libc_init_array+0x3c>)
 8000386:	1b64      	subs	r4, r4, r5
 8000388:	10a4      	asrs	r4, r4, #2
 800038a:	2600      	movs	r6, #0
 800038c:	42a6      	cmp	r6, r4
 800038e:	d109      	bne.n	80003a4 <__libc_init_array+0x24>
 8000390:	4d0b      	ldr	r5, [pc, #44]	@ (80003c0 <__libc_init_array+0x40>)
 8000392:	4c0c      	ldr	r4, [pc, #48]	@ (80003c4 <__libc_init_array+0x44>)
 8000394:	f000 f818 	bl	80003c8 <_init>
 8000398:	1b64      	subs	r4, r4, r5
 800039a:	10a4      	asrs	r4, r4, #2
 800039c:	2600      	movs	r6, #0
 800039e:	42a6      	cmp	r6, r4
 80003a0:	d105      	bne.n	80003ae <__libc_init_array+0x2e>
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003a8:	4798      	blx	r3
 80003aa:	3601      	adds	r6, #1
 80003ac:	e7ee      	b.n	800038c <__libc_init_array+0xc>
 80003ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80003b2:	4798      	blx	r3
 80003b4:	3601      	adds	r6, #1
 80003b6:	e7f2      	b.n	800039e <__libc_init_array+0x1e>
 80003b8:	080003e0 	.word	0x080003e0
 80003bc:	080003e0 	.word	0x080003e0
 80003c0:	080003e0 	.word	0x080003e0
 80003c4:	080003e4 	.word	0x080003e4

080003c8 <_init>:
 80003c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ca:	bf00      	nop
 80003cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ce:	bc08      	pop	{r3}
 80003d0:	469e      	mov	lr, r3
 80003d2:	4770      	bx	lr

080003d4 <_fini>:
 80003d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003d6:	bf00      	nop
 80003d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003da:	bc08      	pop	{r3}
 80003dc:	469e      	mov	lr, r3
 80003de:	4770      	bx	lr
