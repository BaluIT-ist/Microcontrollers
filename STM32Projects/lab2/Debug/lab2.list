
lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003860  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080039e8  080039e8  000049e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a18  08003a18  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003a18  08003a18  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a18  08003a18  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a18  08003a18  00004a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003a1c  08003a1c  00004a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003a20  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          0000014c  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000158  20000158  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a996  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001730  00000000  00000000  0000f9d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009a8  00000000  00000000  00011108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000775  00000000  00000000  00011ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002021d  00000000  00000000  00012225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c141  00000000  00000000  00032442  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ccf3c  00000000  00000000  0003e583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010b4bf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002868  00000000  00000000  0010b504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  0010dd6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080039d0 	.word	0x080039d0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080039d0 	.word	0x080039d0

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fb58 	bl	8000880 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f808 	bl	80001e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f998 	bl	8000508 <MX_GPIO_Init>
  MX_ADC1_Init();
 80001d8:	f000 f866 	bl	80002a8 <MX_ADC1_Init>
  MX_HRTIM1_Init();
 80001dc:	f000 f8d4 	bl	8000388 <MX_HRTIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001e0:	bf00      	nop
 80001e2:	e7fd      	b.n	80001e0 <main+0x18>

080001e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b096      	sub	sp, #88	@ 0x58
 80001e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ea:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80001ee:	2228      	movs	r2, #40	@ 0x28
 80001f0:	2100      	movs	r1, #0
 80001f2:	4618      	mov	r0, r3
 80001f4:	f003 fbc0 	bl	8003978 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f8:	f107 031c 	add.w	r3, r7, #28
 80001fc:	2200      	movs	r2, #0
 80001fe:	601a      	str	r2, [r3, #0]
 8000200:	605a      	str	r2, [r3, #4]
 8000202:	609a      	str	r2, [r3, #8]
 8000204:	60da      	str	r2, [r3, #12]
 8000206:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000208:	463b      	mov	r3, r7
 800020a:	2200      	movs	r2, #0
 800020c:	601a      	str	r2, [r3, #0]
 800020e:	605a      	str	r2, [r3, #4]
 8000210:	609a      	str	r2, [r3, #8]
 8000212:	60da      	str	r2, [r3, #12]
 8000214:	611a      	str	r2, [r3, #16]
 8000216:	615a      	str	r2, [r3, #20]
 8000218:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800021a:	2301      	movs	r3, #1
 800021c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800021e:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000222:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000224:	2300      	movs	r3, #0
 8000226:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000228:	2301      	movs	r3, #1
 800022a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800022c:	2302      	movs	r3, #2
 800022e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000230:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000234:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000236:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800023a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800023c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000240:	4618      	mov	r0, r3
 8000242:	f002 f855 	bl	80022f0 <HAL_RCC_OscConfig>
 8000246:	4603      	mov	r3, r0
 8000248:	2b00      	cmp	r3, #0
 800024a:	d001      	beq.n	8000250 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 800024c:	f000 f9b6 	bl	80005bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000250:	230f      	movs	r3, #15
 8000252:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000254:	2302      	movs	r3, #2
 8000256:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000258:	2300      	movs	r3, #0
 800025a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800025c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000260:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000262:	2300      	movs	r3, #0
 8000264:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000266:	f107 031c 	add.w	r3, r7, #28
 800026a:	2102      	movs	r1, #2
 800026c:	4618      	mov	r0, r3
 800026e:	f003 f87d 	bl	800336c <HAL_RCC_ClockConfig>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d001      	beq.n	800027c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000278:	f000 f9a0 	bl	80005bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1|RCC_PERIPHCLK_ADC12;
 800027c:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8000280:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000282:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000286:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Hrtim1ClockSelection = RCC_HRTIM1CLK_HCLK;
 8000288:	2300      	movs	r3, #0
 800028a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800028c:	463b      	mov	r3, r7
 800028e:	4618      	mov	r0, r3
 8000290:	f003 fa3c 	bl	800370c <HAL_RCCEx_PeriphCLKConfig>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800029a:	f000 f98f 	bl	80005bc <Error_Handler>
  }
}
 800029e:	bf00      	nop
 80002a0:	3758      	adds	r7, #88	@ 0x58
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
	...

080002a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b08a      	sub	sp, #40	@ 0x28
 80002ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002ae:	f107 031c 	add.w	r3, r7, #28
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	605a      	str	r2, [r3, #4]
 80002b8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	2200      	movs	r2, #0
 80002be:	601a      	str	r2, [r3, #0]
 80002c0:	605a      	str	r2, [r3, #4]
 80002c2:	609a      	str	r2, [r3, #8]
 80002c4:	60da      	str	r2, [r3, #12]
 80002c6:	611a      	str	r2, [r3, #16]
 80002c8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002ca:	4b2e      	ldr	r3, [pc, #184]	@ (8000384 <MX_ADC1_Init+0xdc>)
 80002cc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80002d0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002d2:	4b2c      	ldr	r3, [pc, #176]	@ (8000384 <MX_ADC1_Init+0xdc>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002d8:	4b2a      	ldr	r3, [pc, #168]	@ (8000384 <MX_ADC1_Init+0xdc>)
 80002da:	2200      	movs	r2, #0
 80002dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002de:	4b29      	ldr	r3, [pc, #164]	@ (8000384 <MX_ADC1_Init+0xdc>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002e4:	4b27      	ldr	r3, [pc, #156]	@ (8000384 <MX_ADC1_Init+0xdc>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002ea:	4b26      	ldr	r3, [pc, #152]	@ (8000384 <MX_ADC1_Init+0xdc>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80002f2:	4b24      	ldr	r3, [pc, #144]	@ (8000384 <MX_ADC1_Init+0xdc>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002f8:	4b22      	ldr	r3, [pc, #136]	@ (8000384 <MX_ADC1_Init+0xdc>)
 80002fa:	2201      	movs	r2, #1
 80002fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002fe:	4b21      	ldr	r3, [pc, #132]	@ (8000384 <MX_ADC1_Init+0xdc>)
 8000300:	2200      	movs	r2, #0
 8000302:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000304:	4b1f      	ldr	r3, [pc, #124]	@ (8000384 <MX_ADC1_Init+0xdc>)
 8000306:	2201      	movs	r2, #1
 8000308:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800030a:	4b1e      	ldr	r3, [pc, #120]	@ (8000384 <MX_ADC1_Init+0xdc>)
 800030c:	2200      	movs	r2, #0
 800030e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000312:	4b1c      	ldr	r3, [pc, #112]	@ (8000384 <MX_ADC1_Init+0xdc>)
 8000314:	2204      	movs	r2, #4
 8000316:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000318:	4b1a      	ldr	r3, [pc, #104]	@ (8000384 <MX_ADC1_Init+0xdc>)
 800031a:	2200      	movs	r2, #0
 800031c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800031e:	4b19      	ldr	r3, [pc, #100]	@ (8000384 <MX_ADC1_Init+0xdc>)
 8000320:	2200      	movs	r2, #0
 8000322:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000324:	4817      	ldr	r0, [pc, #92]	@ (8000384 <MX_ADC1_Init+0xdc>)
 8000326:	f000 fb11 	bl	800094c <HAL_ADC_Init>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000330:	f000 f944 	bl	80005bc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000334:	2300      	movs	r3, #0
 8000336:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000338:	f107 031c 	add.w	r3, r7, #28
 800033c:	4619      	mov	r1, r3
 800033e:	4811      	ldr	r0, [pc, #68]	@ (8000384 <MX_ADC1_Init+0xdc>)
 8000340:	f000 ff54 	bl	80011ec <HAL_ADCEx_MultiModeConfigChannel>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800034a:	f000 f937 	bl	80005bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800034e:	230b      	movs	r3, #11
 8000350:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000352:	2301      	movs	r3, #1
 8000354:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000356:	2300      	movs	r3, #0
 8000358:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800035a:	2300      	movs	r3, #0
 800035c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800035e:	2300      	movs	r3, #0
 8000360:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000362:	2300      	movs	r3, #0
 8000364:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000366:	1d3b      	adds	r3, r7, #4
 8000368:	4619      	mov	r1, r3
 800036a:	4806      	ldr	r0, [pc, #24]	@ (8000384 <MX_ADC1_Init+0xdc>)
 800036c:	f000 fc80 	bl	8000c70 <HAL_ADC_ConfigChannel>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000376:	f000 f921 	bl	80005bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800037a:	bf00      	nop
 800037c:	3728      	adds	r7, #40	@ 0x28
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	20000028 	.word	0x20000028

08000388 <MX_HRTIM1_Init>:
  * @brief HRTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM1_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b0a2      	sub	sp, #136	@ 0x88
 800038c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 800038e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	605a      	str	r2, [r3, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 800039c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003a0:	2254      	movs	r2, #84	@ 0x54
 80003a2:	2100      	movs	r1, #0
 80003a4:	4618      	mov	r0, r3
 80003a6:	f003 fae7 	bl	8003978 <memset>
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 80003aa:	1d3b      	adds	r3, r7, #4
 80003ac:	2220      	movs	r2, #32
 80003ae:	2100      	movs	r1, #0
 80003b0:	4618      	mov	r0, r3
 80003b2:	f003 fae1 	bl	8003978 <memset>

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 80003b6:	4b52      	ldr	r3, [pc, #328]	@ (8000500 <MX_HRTIM1_Init+0x178>)
 80003b8:	4a52      	ldr	r2, [pc, #328]	@ (8000504 <MX_HRTIM1_Init+0x17c>)
 80003ba:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 80003bc:	4b50      	ldr	r3, [pc, #320]	@ (8000500 <MX_HRTIM1_Init+0x178>)
 80003be:	2200      	movs	r2, #0
 80003c0:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 80003c2:	4b4f      	ldr	r3, [pc, #316]	@ (8000500 <MX_HRTIM1_Init+0x178>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 80003c8:	484d      	ldr	r0, [pc, #308]	@ (8000500 <MX_HRTIM1_Init+0x178>)
 80003ca:	f001 faab 	bl	8001924 <HAL_HRTIM_Init>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <MX_HRTIM1_Init+0x50>
  {
    Error_Handler();
 80003d4:	f000 f8f2 	bl	80005bc <Error_Handler>
  }
  pTimeBaseCfg.Period = 0xFFFD;
 80003d8:	f64f 73fd 	movw	r3, #65533	@ 0xfffd
 80003dc:	67bb      	str	r3, [r7, #120]	@ 0x78
  pTimeBaseCfg.RepetitionCounter = 0x00;
 80003de:	2300      	movs	r3, #0
 80003e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV1;
 80003e2:	2305      	movs	r3, #5
 80003e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 80003e8:	2308      	movs	r3, #8
 80003ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimeBaseCfg) != HAL_OK)
 80003ee:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80003f2:	461a      	mov	r2, r3
 80003f4:	2102      	movs	r1, #2
 80003f6:	4842      	ldr	r0, [pc, #264]	@ (8000500 <MX_HRTIM1_Init+0x178>)
 80003f8:	f001 fb60 	bl	8001abc <HAL_HRTIM_TimeBaseConfig>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <MX_HRTIM1_Init+0x7e>
  {
    Error_Handler();
 8000402:	f000 f8db 	bl	80005bc <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 8000406:	2300      	movs	r3, #0
 8000408:	627b      	str	r3, [r7, #36]	@ 0x24
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 800040a:	2300      	movs	r3, #0
 800040c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pTimerCfg.DMASrcAddress = 0x0000;
 800040e:	2300      	movs	r3, #0
 8000410:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pTimerCfg.DMADstAddress = 0x0000;
 8000412:	2300      	movs	r3, #0
 8000414:	633b      	str	r3, [r7, #48]	@ 0x30
  pTimerCfg.DMASize = 0x1;
 8000416:	2301      	movs	r3, #1
 8000418:	637b      	str	r3, [r7, #52]	@ 0x34
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 800041a:	2300      	movs	r3, #0
 800041c:	63bb      	str	r3, [r7, #56]	@ 0x38
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 800041e:	2300      	movs	r3, #0
 8000420:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8000422:	2300      	movs	r3, #0
 8000424:	643b      	str	r3, [r7, #64]	@ 0x40
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8000426:	2300      	movs	r3, #0
 8000428:	647b      	str	r3, [r7, #68]	@ 0x44
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 800042a:	2300      	movs	r3, #0
 800042c:	64bb      	str	r3, [r7, #72]	@ 0x48
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 800042e:	2300      	movs	r3, #0
 8000430:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8000432:	2300      	movs	r3, #0
 8000434:	653b      	str	r3, [r7, #80]	@ 0x50
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8000436:	2300      	movs	r3, #0
 8000438:	657b      	str	r3, [r7, #84]	@ 0x54
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 800043a:	2300      	movs	r3, #0
 800043c:	65bb      	str	r3, [r7, #88]	@ 0x58
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 800043e:	2300      	movs	r3, #0
 8000440:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8000442:	2300      	movs	r3, #0
 8000444:	663b      	str	r3, [r7, #96]	@ 0x60
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 8000446:	2300      	movs	r3, #0
 8000448:	667b      	str	r3, [r7, #100]	@ 0x64
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 800044a:	2300      	movs	r3, #0
 800044c:	66bb      	str	r3, [r7, #104]	@ 0x68
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 800044e:	2300      	movs	r3, #0
 8000450:	66fb      	str	r3, [r7, #108]	@ 0x6c
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 8000452:	2300      	movs	r3, #0
 8000454:	673b      	str	r3, [r7, #112]	@ 0x70
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 8000456:	2300      	movs	r3, #0
 8000458:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimerCfg) != HAL_OK)
 800045a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800045e:	461a      	mov	r2, r3
 8000460:	2102      	movs	r1, #2
 8000462:	4827      	ldr	r0, [pc, #156]	@ (8000500 <MX_HRTIM1_Init+0x178>)
 8000464:	f001 fb52 	bl	8001b0c <HAL_HRTIM_WaveformTimerConfig>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <MX_HRTIM1_Init+0xea>
  {
    Error_Handler();
 800046e:	f000 f8a5 	bl	80005bc <Error_Handler>
  }
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 8000472:	2300      	movs	r3, #0
 8000474:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pTimerCfg) != HAL_OK)
 8000476:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800047a:	461a      	mov	r2, r3
 800047c:	2103      	movs	r1, #3
 800047e:	4820      	ldr	r0, [pc, #128]	@ (8000500 <MX_HRTIM1_Init+0x178>)
 8000480:	f001 fb44 	bl	8001b0c <HAL_HRTIM_WaveformTimerConfig>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <MX_HRTIM1_Init+0x106>
  {
    Error_Handler();
 800048a:	f000 f897 	bl	80005bc <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 800048e:	2300      	movs	r3, #0
 8000490:	607b      	str	r3, [r7, #4]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 8000492:	2300      	movs	r3, #0
 8000494:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 8000496:	2300      	movs	r3, #0
 8000498:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 800049a:	2300      	movs	r3, #0
 800049c:	613b      	str	r3, [r7, #16]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 800049e:	2300      	movs	r3, #0
 80004a0:	617b      	str	r3, [r7, #20]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 80004a2:	2300      	movs	r3, #0
 80004a4:	61bb      	str	r3, [r7, #24]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 80004a6:	2300      	movs	r3, #0
 80004a8:	61fb      	str	r3, [r7, #28]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 80004aa:	2300      	movs	r3, #0
 80004ac:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC1, &pOutputCfg) != HAL_OK)
 80004ae:	1d3b      	adds	r3, r7, #4
 80004b0:	2210      	movs	r2, #16
 80004b2:	2102      	movs	r1, #2
 80004b4:	4812      	ldr	r0, [pc, #72]	@ (8000500 <MX_HRTIM1_Init+0x178>)
 80004b6:	f001 fb9b 	bl	8001bf0 <HAL_HRTIM_WaveformOutputConfig>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d001      	beq.n	80004c4 <MX_HRTIM1_Init+0x13c>
  {
    Error_Handler();
 80004c0:	f000 f87c 	bl	80005bc <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD1, &pOutputCfg) != HAL_OK)
 80004c4:	1d3b      	adds	r3, r7, #4
 80004c6:	2240      	movs	r2, #64	@ 0x40
 80004c8:	2103      	movs	r1, #3
 80004ca:	480d      	ldr	r0, [pc, #52]	@ (8000500 <MX_HRTIM1_Init+0x178>)
 80004cc:	f001 fb90 	bl	8001bf0 <HAL_HRTIM_WaveformOutputConfig>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <MX_HRTIM1_Init+0x152>
  {
    Error_Handler();
 80004d6:	f000 f871 	bl	80005bc <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pTimeBaseCfg) != HAL_OK)
 80004da:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80004de:	461a      	mov	r2, r3
 80004e0:	2103      	movs	r1, #3
 80004e2:	4807      	ldr	r0, [pc, #28]	@ (8000500 <MX_HRTIM1_Init+0x178>)
 80004e4:	f001 faea 	bl	8001abc <HAL_HRTIM_TimeBaseConfig>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <MX_HRTIM1_Init+0x16a>
  {
    Error_Handler();
 80004ee:	f000 f865 	bl	80005bc <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim1);
 80004f2:	4803      	ldr	r0, [pc, #12]	@ (8000500 <MX_HRTIM1_Init+0x178>)
 80004f4:	f000 f902 	bl	80006fc <HAL_HRTIM_MspPostInit>

}
 80004f8:	bf00      	nop
 80004fa:	3788      	adds	r7, #136	@ 0x88
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	20000078 	.word	0x20000078
 8000504:	40017400 	.word	0x40017400

08000508 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b088      	sub	sp, #32
 800050c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	f107 030c 	add.w	r3, r7, #12
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800051e:	4b25      	ldr	r3, [pc, #148]	@ (80005b4 <MX_GPIO_Init+0xac>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	4a24      	ldr	r2, [pc, #144]	@ (80005b4 <MX_GPIO_Init+0xac>)
 8000524:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000528:	6153      	str	r3, [r2, #20]
 800052a:	4b22      	ldr	r3, [pc, #136]	@ (80005b4 <MX_GPIO_Init+0xac>)
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000532:	60bb      	str	r3, [r7, #8]
 8000534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000536:	4b1f      	ldr	r3, [pc, #124]	@ (80005b4 <MX_GPIO_Init+0xac>)
 8000538:	695b      	ldr	r3, [r3, #20]
 800053a:	4a1e      	ldr	r2, [pc, #120]	@ (80005b4 <MX_GPIO_Init+0xac>)
 800053c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000540:	6153      	str	r3, [r2, #20]
 8000542:	4b1c      	ldr	r3, [pc, #112]	@ (80005b4 <MX_GPIO_Init+0xac>)
 8000544:	695b      	ldr	r3, [r3, #20]
 8000546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800054e:	4b19      	ldr	r3, [pc, #100]	@ (80005b4 <MX_GPIO_Init+0xac>)
 8000550:	695b      	ldr	r3, [r3, #20]
 8000552:	4a18      	ldr	r2, [pc, #96]	@ (80005b4 <MX_GPIO_Init+0xac>)
 8000554:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000558:	6153      	str	r3, [r2, #20]
 800055a:	4b16      	ldr	r3, [pc, #88]	@ (80005b4 <MX_GPIO_Init+0xac>)
 800055c:	695b      	ldr	r3, [r3, #20]
 800055e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000562:	603b      	str	r3, [r7, #0]
 8000564:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD_U_Pin|LD_D_Pin|LD_L_Pin|LD_R_Pin, GPIO_PIN_RESET);
 8000566:	2200      	movs	r2, #0
 8000568:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 800056c:	4812      	ldr	r0, [pc, #72]	@ (80005b8 <MX_GPIO_Init+0xb0>)
 800056e:	f001 f9c1 	bl	80018f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000572:	2301      	movs	r3, #1
 8000574:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000576:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800057a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057c:	2300      	movs	r3, #0
 800057e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	4619      	mov	r1, r3
 8000586:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800058a:	f001 f841 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD_U_Pin LD_D_Pin LD_L_Pin LD_R_Pin */
  GPIO_InitStruct.Pin = LD_U_Pin|LD_D_Pin|LD_L_Pin|LD_R_Pin;
 800058e:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000592:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000594:	2301      	movs	r3, #1
 8000596:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	2300      	movs	r3, #0
 800059a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059c:	2300      	movs	r3, #0
 800059e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	4619      	mov	r1, r3
 80005a6:	4804      	ldr	r0, [pc, #16]	@ (80005b8 <MX_GPIO_Init+0xb0>)
 80005a8:	f001 f832 	bl	8001610 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005ac:	bf00      	nop
 80005ae:	3720      	adds	r7, #32
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40021000 	.word	0x40021000
 80005b8:	48000400 	.word	0x48000400

080005bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c0:	b672      	cpsid	i
}
 80005c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005c4:	bf00      	nop
 80005c6:	e7fd      	b.n	80005c4 <Error_Handler+0x8>

080005c8 <HAL_MspInit>:
void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef *hhrtim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ce:	4b0f      	ldr	r3, [pc, #60]	@ (800060c <HAL_MspInit+0x44>)
 80005d0:	699b      	ldr	r3, [r3, #24]
 80005d2:	4a0e      	ldr	r2, [pc, #56]	@ (800060c <HAL_MspInit+0x44>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	6193      	str	r3, [r2, #24]
 80005da:	4b0c      	ldr	r3, [pc, #48]	@ (800060c <HAL_MspInit+0x44>)
 80005dc:	699b      	ldr	r3, [r3, #24]
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e6:	4b09      	ldr	r3, [pc, #36]	@ (800060c <HAL_MspInit+0x44>)
 80005e8:	69db      	ldr	r3, [r3, #28]
 80005ea:	4a08      	ldr	r2, [pc, #32]	@ (800060c <HAL_MspInit+0x44>)
 80005ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005f0:	61d3      	str	r3, [r2, #28]
 80005f2:	4b06      	ldr	r3, [pc, #24]	@ (800060c <HAL_MspInit+0x44>)
 80005f4:	69db      	ldr	r3, [r3, #28]
 80005f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005fa:	603b      	str	r3, [r7, #0]
 80005fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80005fe:	2007      	movs	r0, #7
 8000600:	f000 ffd2 	bl	80015a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000604:	bf00      	nop
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40021000 	.word	0x40021000

08000610 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b08a      	sub	sp, #40	@ 0x28
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000618:	f107 0314 	add.w	r3, r7, #20
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000630:	d13c      	bne.n	80006ac <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000632:	4b20      	ldr	r3, [pc, #128]	@ (80006b4 <HAL_ADC_MspInit+0xa4>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	4a1f      	ldr	r2, [pc, #124]	@ (80006b4 <HAL_ADC_MspInit+0xa4>)
 8000638:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800063c:	6153      	str	r3, [r2, #20]
 800063e:	4b1d      	ldr	r3, [pc, #116]	@ (80006b4 <HAL_ADC_MspInit+0xa4>)
 8000640:	695b      	ldr	r3, [r3, #20]
 8000642:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000646:	613b      	str	r3, [r7, #16]
 8000648:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800064a:	4b1a      	ldr	r3, [pc, #104]	@ (80006b4 <HAL_ADC_MspInit+0xa4>)
 800064c:	695b      	ldr	r3, [r3, #20]
 800064e:	4a19      	ldr	r2, [pc, #100]	@ (80006b4 <HAL_ADC_MspInit+0xa4>)
 8000650:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000654:	6153      	str	r3, [r2, #20]
 8000656:	4b17      	ldr	r3, [pc, #92]	@ (80006b4 <HAL_ADC_MspInit+0xa4>)
 8000658:	695b      	ldr	r3, [r3, #20]
 800065a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000662:	4b14      	ldr	r3, [pc, #80]	@ (80006b4 <HAL_ADC_MspInit+0xa4>)
 8000664:	695b      	ldr	r3, [r3, #20]
 8000666:	4a13      	ldr	r2, [pc, #76]	@ (80006b4 <HAL_ADC_MspInit+0xa4>)
 8000668:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800066c:	6153      	str	r3, [r2, #20]
 800066e:	4b11      	ldr	r3, [pc, #68]	@ (80006b4 <HAL_ADC_MspInit+0xa4>)
 8000670:	695b      	ldr	r3, [r3, #20]
 8000672:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    PA3     ------> ADC1_IN4
    PB0     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = Vin_Sense_Pin|Vout_Sense_Pin;
 800067a:	230a      	movs	r3, #10
 800067c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800067e:	2303      	movs	r3, #3
 8000680:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	4619      	mov	r1, r3
 800068c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000690:	f000 ffbe 	bl	8001610 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BK_Sense_Pin;
 8000694:	2301      	movs	r3, #1
 8000696:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000698:	2303      	movs	r3, #3
 800069a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BK_Sense_GPIO_Port, &GPIO_InitStruct);
 80006a0:	f107 0314 	add.w	r3, r7, #20
 80006a4:	4619      	mov	r1, r3
 80006a6:	4804      	ldr	r0, [pc, #16]	@ (80006b8 <HAL_ADC_MspInit+0xa8>)
 80006a8:	f000 ffb2 	bl	8001610 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80006ac:	bf00      	nop
 80006ae:	3728      	adds	r7, #40	@ 0x28
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40021000 	.word	0x40021000
 80006b8:	48000400 	.word	0x48000400

080006bc <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 80006bc:	b480      	push	{r7}
 80006be:	b085      	sub	sp, #20
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  if(hhrtim->Instance==HRTIM1)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a0a      	ldr	r2, [pc, #40]	@ (80006f4 <HAL_HRTIM_MspInit+0x38>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d10b      	bne.n	80006e6 <HAL_HRTIM_MspInit+0x2a>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 80006ce:	4b0a      	ldr	r3, [pc, #40]	@ (80006f8 <HAL_HRTIM_MspInit+0x3c>)
 80006d0:	699b      	ldr	r3, [r3, #24]
 80006d2:	4a09      	ldr	r2, [pc, #36]	@ (80006f8 <HAL_HRTIM_MspInit+0x3c>)
 80006d4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80006d8:	6193      	str	r3, [r2, #24]
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <HAL_HRTIM_MspInit+0x3c>)
 80006dc:	699b      	ldr	r3, [r3, #24]
 80006de:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END HRTIM1_MspInit 1 */

  }

}
 80006e6:	bf00      	nop
 80006e8:	3714      	adds	r7, #20
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	40017400 	.word	0x40017400
 80006f8:	40021000 	.word	0x40021000

080006fc <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08a      	sub	sp, #40	@ 0x28
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000704:	f107 0314 	add.w	r3, r7, #20
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a20      	ldr	r2, [pc, #128]	@ (800079c <HAL_HRTIM_MspPostInit+0xa0>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d13a      	bne.n	8000794 <HAL_HRTIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800071e:	4b20      	ldr	r3, [pc, #128]	@ (80007a0 <HAL_HRTIM_MspPostInit+0xa4>)
 8000720:	695b      	ldr	r3, [r3, #20]
 8000722:	4a1f      	ldr	r2, [pc, #124]	@ (80007a0 <HAL_HRTIM_MspPostInit+0xa4>)
 8000724:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000728:	6153      	str	r3, [r2, #20]
 800072a:	4b1d      	ldr	r3, [pc, #116]	@ (80007a0 <HAL_HRTIM_MspPostInit+0xa4>)
 800072c:	695b      	ldr	r3, [r3, #20]
 800072e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000732:	613b      	str	r3, [r7, #16]
 8000734:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000736:	4b1a      	ldr	r3, [pc, #104]	@ (80007a0 <HAL_HRTIM_MspPostInit+0xa4>)
 8000738:	695b      	ldr	r3, [r3, #20]
 800073a:	4a19      	ldr	r2, [pc, #100]	@ (80007a0 <HAL_HRTIM_MspPostInit+0xa4>)
 800073c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000740:	6153      	str	r3, [r2, #20]
 8000742:	4b17      	ldr	r3, [pc, #92]	@ (80007a0 <HAL_HRTIM_MspPostInit+0xa4>)
 8000744:	695b      	ldr	r3, [r3, #20]
 8000746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> HRTIM1_CHA1
    PA9     ------> HRTIM1_CHA2
    PA10     ------> HRTIM1_CHB1
    PA11     ------> HRTIM1_CHB2
    */
    GPIO_InitStruct.Pin = BK_Drive_Pin|RC_Pin;
 800074e:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8000752:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000754:	2302      	movs	r3, #2
 8000756:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800075c:	2303      	movs	r3, #3
 800075e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8000760:	230d      	movs	r3, #13
 8000762:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	4619      	mov	r1, r3
 800076a:	480e      	ldr	r0, [pc, #56]	@ (80007a4 <HAL_HRTIM_MspPostInit+0xa8>)
 800076c:	f000 ff50 	bl	8001610 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = P1_Drive_Pin|N1_Drive_Pin|N2_Drive_Pin|P2_Drive_Pin;
 8000770:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000774:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000776:	2302      	movs	r3, #2
 8000778:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800077e:	2303      	movs	r3, #3
 8000780:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8000782:	230d      	movs	r3, #13
 8000784:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	4619      	mov	r1, r3
 800078c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000790:	f000 ff3e 	bl	8001610 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8000794:	bf00      	nop
 8000796:	3728      	adds	r7, #40	@ 0x28
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40017400 	.word	0x40017400
 80007a0:	40021000 	.word	0x40021000
 80007a4:	48000400 	.word	0x48000400

080007a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007ac:	bf00      	nop
 80007ae:	e7fd      	b.n	80007ac <NMI_Handler+0x4>

080007b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b4:	bf00      	nop
 80007b6:	e7fd      	b.n	80007b4 <HardFault_Handler+0x4>

080007b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007bc:	bf00      	nop
 80007be:	e7fd      	b.n	80007bc <MemManage_Handler+0x4>

080007c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007c4:	bf00      	nop
 80007c6:	e7fd      	b.n	80007c4 <BusFault_Handler+0x4>

080007c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <UsageFault_Handler+0x4>

080007d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr

080007de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr

080007fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007fe:	f000 f885 	bl	800090c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
	...

08000808 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800080c:	4b06      	ldr	r3, [pc, #24]	@ (8000828 <SystemInit+0x20>)
 800080e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000812:	4a05      	ldr	r2, [pc, #20]	@ (8000828 <SystemInit+0x20>)
 8000814:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000818:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	e000ed00 	.word	0xe000ed00

0800082c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800082c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000864 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000830:	f7ff ffea 	bl	8000808 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000834:	480c      	ldr	r0, [pc, #48]	@ (8000868 <LoopForever+0x6>)
  ldr r1, =_edata
 8000836:	490d      	ldr	r1, [pc, #52]	@ (800086c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000838:	4a0d      	ldr	r2, [pc, #52]	@ (8000870 <LoopForever+0xe>)
  movs r3, #0
 800083a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800083c:	e002      	b.n	8000844 <LoopCopyDataInit>

0800083e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800083e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000840:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000842:	3304      	adds	r3, #4

08000844 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000844:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000846:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000848:	d3f9      	bcc.n	800083e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800084a:	4a0a      	ldr	r2, [pc, #40]	@ (8000874 <LoopForever+0x12>)
  ldr r4, =_ebss
 800084c:	4c0a      	ldr	r4, [pc, #40]	@ (8000878 <LoopForever+0x16>)
  movs r3, #0
 800084e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000850:	e001      	b.n	8000856 <LoopFillZerobss>

08000852 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000852:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000854:	3204      	adds	r2, #4

08000856 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000856:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000858:	d3fb      	bcc.n	8000852 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800085a:	f003 f895 	bl	8003988 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800085e:	f7ff fcb3 	bl	80001c8 <main>

08000862 <LoopForever>:

LoopForever:
    b LoopForever
 8000862:	e7fe      	b.n	8000862 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000864:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000868:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800086c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000870:	08003a20 	.word	0x08003a20
  ldr r2, =_sbss
 8000874:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000878:	20000158 	.word	0x20000158

0800087c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800087c:	e7fe      	b.n	800087c <ADC1_2_IRQHandler>
	...

08000880 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000884:	4b08      	ldr	r3, [pc, #32]	@ (80008a8 <HAL_Init+0x28>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a07      	ldr	r2, [pc, #28]	@ (80008a8 <HAL_Init+0x28>)
 800088a:	f043 0310 	orr.w	r3, r3, #16
 800088e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000890:	2003      	movs	r0, #3
 8000892:	f000 fe89 	bl	80015a8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000896:	2000      	movs	r0, #0
 8000898:	f000 f808 	bl	80008ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800089c:	f7ff fe94 	bl	80005c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008a0:	2300      	movs	r3, #0
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40022000 	.word	0x40022000

080008ac <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008b4:	4b12      	ldr	r3, [pc, #72]	@ (8000900 <HAL_InitTick+0x54>)
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	4b12      	ldr	r3, [pc, #72]	@ (8000904 <HAL_InitTick+0x58>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	4619      	mov	r1, r3
 80008be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 fe93 	bl	80015f6 <HAL_SYSTICK_Config>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008d6:	2301      	movs	r3, #1
 80008d8:	e00e      	b.n	80008f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2b0f      	cmp	r3, #15
 80008de:	d80a      	bhi.n	80008f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008e0:	2200      	movs	r2, #0
 80008e2:	6879      	ldr	r1, [r7, #4]
 80008e4:	f04f 30ff 	mov.w	r0, #4294967295
 80008e8:	f000 fe69 	bl	80015be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008ec:	4a06      	ldr	r2, [pc, #24]	@ (8000908 <HAL_InitTick+0x5c>)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80008f2:	2300      	movs	r3, #0
 80008f4:	e000      	b.n	80008f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008f6:	2301      	movs	r3, #1
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000000 	.word	0x20000000
 8000904:	20000008 	.word	0x20000008
 8000908:	20000004 	.word	0x20000004

0800090c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000910:	4b06      	ldr	r3, [pc, #24]	@ (800092c <HAL_IncTick+0x20>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	461a      	mov	r2, r3
 8000916:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <HAL_IncTick+0x24>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4413      	add	r3, r2
 800091c:	4a04      	ldr	r2, [pc, #16]	@ (8000930 <HAL_IncTick+0x24>)
 800091e:	6013      	str	r3, [r2, #0]
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	20000008 	.word	0x20000008
 8000930:	20000154 	.word	0x20000154

08000934 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  return uwTick;  
 8000938:	4b03      	ldr	r3, [pc, #12]	@ (8000948 <HAL_GetTick+0x14>)
 800093a:	681b      	ldr	r3, [r3, #0]
}
 800093c:	4618      	mov	r0, r3
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	20000154 	.word	0x20000154

0800094c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b09a      	sub	sp, #104	@ 0x68
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000954:	2300      	movs	r3, #0
 8000956:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800095a:	2300      	movs	r3, #0
 800095c:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 800095e:	2300      	movs	r3, #0
 8000960:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d101      	bne.n	800096c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000968:	2301      	movs	r3, #1
 800096a:	e172      	b.n	8000c52 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	691b      	ldr	r3, [r3, #16]
 8000970:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000976:	f003 0310 	and.w	r3, r3, #16
 800097a:	2b00      	cmp	r3, #0
 800097c:	d176      	bne.n	8000a6c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000982:	2b00      	cmp	r3, #0
 8000984:	d152      	bne.n	8000a2c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2200      	movs	r2, #0
 800098a:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2200      	movs	r2, #0
 8000990:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2200      	movs	r2, #0
 8000996:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2200      	movs	r2, #0
 800099c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f7ff fe35 	bl	8000610 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d13b      	bne.n	8000a2c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f000 fcdf 	bl	8001378 <ADC_Disable>
 80009ba:	4603      	mov	r3, r0
 80009bc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c4:	f003 0310 	and.w	r3, r3, #16
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d12f      	bne.n	8000a2c <HAL_ADC_Init+0xe0>
 80009cc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d12b      	bne.n	8000a2c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80009dc:	f023 0302 	bic.w	r3, r3, #2
 80009e0:	f043 0202 	orr.w	r2, r3, #2
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	689a      	ldr	r2, [r3, #8]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80009f6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	689a      	ldr	r2, [r3, #8]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000a06:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000a08:	4b94      	ldr	r3, [pc, #592]	@ (8000c5c <HAL_ADC_Init+0x310>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a94      	ldr	r2, [pc, #592]	@ (8000c60 <HAL_ADC_Init+0x314>)
 8000a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a12:	0c9a      	lsrs	r2, r3, #18
 8000a14:	4613      	mov	r3, r2
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	4413      	add	r3, r2
 8000a1a:	005b      	lsls	r3, r3, #1
 8000a1c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000a1e:	e002      	b.n	8000a26 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	3b01      	subs	r3, #1
 8000a24:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d1f9      	bne.n	8000a20 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	689b      	ldr	r3, [r3, #8]
 8000a32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d007      	beq.n	8000a4a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	689b      	ldr	r3, [r3, #8]
 8000a40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000a44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000a48:	d110      	bne.n	8000a6c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a4e:	f023 0312 	bic.w	r3, r3, #18
 8000a52:	f043 0210 	orr.w	r2, r3, #16
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a5e:	f043 0201 	orr.w	r2, r3, #1
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
 8000a68:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a70:	f003 0310 	and.w	r3, r3, #16
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	f040 80df 	bne.w	8000c38 <HAL_ADC_Init+0x2ec>
 8000a7a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	f040 80da 	bne.w	8000c38 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	689b      	ldr	r3, [r3, #8]
 8000a8a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	f040 80d2 	bne.w	8000c38 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a98:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000a9c:	f043 0202 	orr.w	r2, r3, #2
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000aa4:	4b6f      	ldr	r3, [pc, #444]	@ (8000c64 <HAL_ADC_Init+0x318>)
 8000aa6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000ab0:	d102      	bne.n	8000ab8 <HAL_ADC_Init+0x16c>
 8000ab2:	4b6d      	ldr	r3, [pc, #436]	@ (8000c68 <HAL_ADC_Init+0x31c>)
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	e002      	b.n	8000abe <HAL_ADC_Init+0x172>
 8000ab8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000abc:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	689b      	ldr	r3, [r3, #8]
 8000ac4:	f003 0303 	and.w	r3, r3, #3
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d108      	bne.n	8000ade <HAL_ADC_Init+0x192>
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d101      	bne.n	8000ade <HAL_ADC_Init+0x192>
 8000ada:	2301      	movs	r3, #1
 8000adc:	e000      	b.n	8000ae0 <HAL_ADC_Init+0x194>
 8000ade:	2300      	movs	r3, #0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d11c      	bne.n	8000b1e <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000ae4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d010      	beq.n	8000b0c <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	689b      	ldr	r3, [r3, #8]
 8000aee:	f003 0303 	and.w	r3, r3, #3
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d107      	bne.n	8000b06 <HAL_ADC_Init+0x1ba>
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d101      	bne.n	8000b06 <HAL_ADC_Init+0x1ba>
 8000b02:	2301      	movs	r3, #1
 8000b04:	e000      	b.n	8000b08 <HAL_ADC_Init+0x1bc>
 8000b06:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d108      	bne.n	8000b1e <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000b0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000b0e:	689b      	ldr	r3, [r3, #8]
 8000b10:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	431a      	orrs	r2, r3
 8000b1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000b1c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	7e5b      	ldrb	r3, [r3, #25]
 8000b22:	035b      	lsls	r3, r3, #13
 8000b24:	687a      	ldr	r2, [r7, #4]
 8000b26:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000b28:	2a01      	cmp	r2, #1
 8000b2a:	d002      	beq.n	8000b32 <HAL_ADC_Init+0x1e6>
 8000b2c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000b30:	e000      	b.n	8000b34 <HAL_ADC_Init+0x1e8>
 8000b32:	2200      	movs	r2, #0
 8000b34:	431a      	orrs	r2, r3
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	68db      	ldr	r3, [r3, #12]
 8000b3a:	431a      	orrs	r2, r3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	689b      	ldr	r3, [r3, #8]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000b44:	4313      	orrs	r3, r2
 8000b46:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d11b      	bne.n	8000b8a <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	7e5b      	ldrb	r3, [r3, #25]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d109      	bne.n	8000b6e <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b5e:	3b01      	subs	r3, #1
 8000b60:	045a      	lsls	r2, r3, #17
 8000b62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000b64:	4313      	orrs	r3, r2
 8000b66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b6a:	663b      	str	r3, [r7, #96]	@ 0x60
 8000b6c:	e00d      	b.n	8000b8a <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b72:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8000b76:	f043 0220 	orr.w	r2, r3, #32
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b82:	f043 0201 	orr.w	r2, r3, #1
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d007      	beq.n	8000ba2 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	689b      	ldr	r3, [r3, #8]
 8000ba8:	f003 030c 	and.w	r3, r3, #12
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d114      	bne.n	8000bda <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	68db      	ldr	r3, [r3, #12]
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	6812      	ldr	r2, [r2, #0]
 8000bba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000bbe:	f023 0302 	bic.w	r3, r3, #2
 8000bc2:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	7e1b      	ldrb	r3, [r3, #24]
 8000bc8:	039a      	lsls	r2, r3, #14
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	68da      	ldr	r2, [r3, #12]
 8000be0:	4b22      	ldr	r3, [pc, #136]	@ (8000c6c <HAL_ADC_Init+0x320>)
 8000be2:	4013      	ands	r3, r2
 8000be4:	687a      	ldr	r2, [r7, #4]
 8000be6:	6812      	ldr	r2, [r2, #0]
 8000be8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8000bea:	430b      	orrs	r3, r1
 8000bec:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	691b      	ldr	r3, [r3, #16]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d10c      	bne.n	8000c10 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfc:	f023 010f 	bic.w	r1, r3, #15
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	69db      	ldr	r3, [r3, #28]
 8000c04:	1e5a      	subs	r2, r3, #1
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	430a      	orrs	r2, r1
 8000c0c:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c0e:	e007      	b.n	8000c20 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f022 020f 	bic.w	r2, r2, #15
 8000c1e:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2200      	movs	r2, #0
 8000c24:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2a:	f023 0303 	bic.w	r3, r3, #3
 8000c2e:	f043 0201 	orr.w	r2, r3, #1
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	641a      	str	r2, [r3, #64]	@ 0x40
 8000c36:	e00a      	b.n	8000c4e <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c3c:	f023 0312 	bic.w	r3, r3, #18
 8000c40:	f043 0210 	orr.w	r2, r3, #16
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000c48:	2301      	movs	r3, #1
 8000c4a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000c4e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3768      	adds	r7, #104	@ 0x68
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000000 	.word	0x20000000
 8000c60:	431bde83 	.word	0x431bde83
 8000c64:	50000300 	.word	0x50000300
 8000c68:	50000100 	.word	0x50000100
 8000c6c:	fff0c007 	.word	0xfff0c007

08000c70 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b09b      	sub	sp, #108	@ 0x6c
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000c80:	2300      	movs	r3, #0
 8000c82:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d101      	bne.n	8000c92 <HAL_ADC_ConfigChannel+0x22>
 8000c8e:	2302      	movs	r3, #2
 8000c90:	e2a1      	b.n	80011d6 <HAL_ADC_ConfigChannel+0x566>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2201      	movs	r2, #1
 8000c96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	f003 0304 	and.w	r3, r3, #4
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	f040 8285 	bne.w	80011b4 <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	2b04      	cmp	r3, #4
 8000cb0:	d81c      	bhi.n	8000cec <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685a      	ldr	r2, [r3, #4]
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	4413      	add	r3, r2
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	231f      	movs	r3, #31
 8000cc8:	4093      	lsls	r3, r2
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	4019      	ands	r1, r3
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	6818      	ldr	r0, [r3, #0]
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685a      	ldr	r2, [r3, #4]
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	4413      	add	r3, r2
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	fa00 f203 	lsl.w	r2, r0, r3
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	430a      	orrs	r2, r1
 8000ce8:	631a      	str	r2, [r3, #48]	@ 0x30
 8000cea:	e063      	b.n	8000db4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	2b09      	cmp	r3, #9
 8000cf2:	d81e      	bhi.n	8000d32 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685a      	ldr	r2, [r3, #4]
 8000cfe:	4613      	mov	r3, r2
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	4413      	add	r3, r2
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	3b1e      	subs	r3, #30
 8000d08:	221f      	movs	r2, #31
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	4019      	ands	r1, r3
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	6818      	ldr	r0, [r3, #0]
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685a      	ldr	r2, [r3, #4]
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	4413      	add	r3, r2
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	3b1e      	subs	r3, #30
 8000d24:	fa00 f203 	lsl.w	r2, r0, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	430a      	orrs	r2, r1
 8000d2e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d30:	e040      	b.n	8000db4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	2b0e      	cmp	r3, #14
 8000d38:	d81e      	bhi.n	8000d78 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685a      	ldr	r2, [r3, #4]
 8000d44:	4613      	mov	r3, r2
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	4413      	add	r3, r2
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	3b3c      	subs	r3, #60	@ 0x3c
 8000d4e:	221f      	movs	r2, #31
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	43db      	mvns	r3, r3
 8000d56:	4019      	ands	r1, r3
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	6818      	ldr	r0, [r3, #0]
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685a      	ldr	r2, [r3, #4]
 8000d60:	4613      	mov	r3, r2
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	4413      	add	r3, r2
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	3b3c      	subs	r3, #60	@ 0x3c
 8000d6a:	fa00 f203 	lsl.w	r2, r0, r3
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	430a      	orrs	r2, r1
 8000d74:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d76:	e01d      	b.n	8000db4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685a      	ldr	r2, [r3, #4]
 8000d82:	4613      	mov	r3, r2
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	4413      	add	r3, r2
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	3b5a      	subs	r3, #90	@ 0x5a
 8000d8c:	221f      	movs	r2, #31
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43db      	mvns	r3, r3
 8000d94:	4019      	ands	r1, r3
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	6818      	ldr	r0, [r3, #0]
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685a      	ldr	r2, [r3, #4]
 8000d9e:	4613      	mov	r3, r2
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	4413      	add	r3, r2
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	3b5a      	subs	r3, #90	@ 0x5a
 8000da8:	fa00 f203 	lsl.w	r2, r0, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	430a      	orrs	r2, r1
 8000db2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	f003 030c 	and.w	r3, r3, #12
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	f040 80e5 	bne.w	8000f8e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b09      	cmp	r3, #9
 8000dca:	d91c      	bls.n	8000e06 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	6999      	ldr	r1, [r3, #24]
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	4413      	add	r3, r2
 8000ddc:	3b1e      	subs	r3, #30
 8000dde:	2207      	movs	r2, #7
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	43db      	mvns	r3, r3
 8000de6:	4019      	ands	r1, r3
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	6898      	ldr	r0, [r3, #8]
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	4613      	mov	r3, r2
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	4413      	add	r3, r2
 8000df6:	3b1e      	subs	r3, #30
 8000df8:	fa00 f203 	lsl.w	r2, r0, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	430a      	orrs	r2, r1
 8000e02:	619a      	str	r2, [r3, #24]
 8000e04:	e019      	b.n	8000e3a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	6959      	ldr	r1, [r3, #20]
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	4613      	mov	r3, r2
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	4413      	add	r3, r2
 8000e16:	2207      	movs	r2, #7
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	4019      	ands	r1, r3
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	6898      	ldr	r0, [r3, #8]
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	4613      	mov	r3, r2
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	4413      	add	r3, r2
 8000e2e:	fa00 f203 	lsl.w	r2, r0, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	430a      	orrs	r2, r1
 8000e38:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	695a      	ldr	r2, [r3, #20]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	08db      	lsrs	r3, r3, #3
 8000e46:	f003 0303 	and.w	r3, r3, #3
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	691b      	ldr	r3, [r3, #16]
 8000e56:	3b01      	subs	r3, #1
 8000e58:	2b03      	cmp	r3, #3
 8000e5a:	d84f      	bhi.n	8000efc <HAL_ADC_ConfigChannel+0x28c>
 8000e5c:	a201      	add	r2, pc, #4	@ (adr r2, 8000e64 <HAL_ADC_ConfigChannel+0x1f4>)
 8000e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e62:	bf00      	nop
 8000e64:	08000e75 	.word	0x08000e75
 8000e68:	08000e97 	.word	0x08000e97
 8000e6c:	08000eb9 	.word	0x08000eb9
 8000e70:	08000edb 	.word	0x08000edb
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000e7a:	4b9c      	ldr	r3, [pc, #624]	@ (80010ec <HAL_ADC_ConfigChannel+0x47c>)
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	683a      	ldr	r2, [r7, #0]
 8000e80:	6812      	ldr	r2, [r2, #0]
 8000e82:	0691      	lsls	r1, r2, #26
 8000e84:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000e86:	430a      	orrs	r2, r1
 8000e88:	431a      	orrs	r2, r3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8000e92:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000e94:	e07b      	b.n	8000f8e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000e9c:	4b93      	ldr	r3, [pc, #588]	@ (80010ec <HAL_ADC_ConfigChannel+0x47c>)
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	683a      	ldr	r2, [r7, #0]
 8000ea2:	6812      	ldr	r2, [r2, #0]
 8000ea4:	0691      	lsls	r1, r2, #26
 8000ea6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000ea8:	430a      	orrs	r2, r1
 8000eaa:	431a      	orrs	r2, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8000eb4:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000eb6:	e06a      	b.n	8000f8e <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8000ebe:	4b8b      	ldr	r3, [pc, #556]	@ (80010ec <HAL_ADC_ConfigChannel+0x47c>)
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	683a      	ldr	r2, [r7, #0]
 8000ec4:	6812      	ldr	r2, [r2, #0]
 8000ec6:	0691      	lsls	r1, r2, #26
 8000ec8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000eca:	430a      	orrs	r2, r1
 8000ecc:	431a      	orrs	r2, r3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8000ed6:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000ed8:	e059      	b.n	8000f8e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8000ee0:	4b82      	ldr	r3, [pc, #520]	@ (80010ec <HAL_ADC_ConfigChannel+0x47c>)
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	683a      	ldr	r2, [r7, #0]
 8000ee6:	6812      	ldr	r2, [r2, #0]
 8000ee8:	0691      	lsls	r1, r2, #26
 8000eea:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000eec:	430a      	orrs	r2, r1
 8000eee:	431a      	orrs	r2, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8000ef8:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000efa:	e048      	b.n	8000f8e <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f02:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	069b      	lsls	r3, r3, #26
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d107      	bne.n	8000f20 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8000f1e:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8000f26:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	069b      	lsls	r3, r3, #26
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d107      	bne.n	8000f44 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8000f42:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000f4a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	069b      	lsls	r3, r3, #26
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d107      	bne.n	8000f68 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8000f66:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8000f6e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	069b      	lsls	r3, r3, #26
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d107      	bne.n	8000f8c <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8000f8a:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8000f8c:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	f003 0303 	and.w	r3, r3, #3
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d108      	bne.n	8000fae <HAL_ADC_ConfigChannel+0x33e>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d101      	bne.n	8000fae <HAL_ADC_ConfigChannel+0x33e>
 8000faa:	2301      	movs	r3, #1
 8000fac:	e000      	b.n	8000fb0 <HAL_ADC_ConfigChannel+0x340>
 8000fae:	2300      	movs	r3, #0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	f040 810a 	bne.w	80011ca <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	68db      	ldr	r3, [r3, #12]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d00f      	beq.n	8000fde <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2201      	movs	r2, #1
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	43da      	mvns	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	400a      	ands	r2, r1
 8000fd8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8000fdc:	e049      	b.n	8001072 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2201      	movs	r2, #1
 8000fec:	409a      	lsls	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b09      	cmp	r3, #9
 8000ffe:	d91c      	bls.n	800103a <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	6999      	ldr	r1, [r3, #24]
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	4613      	mov	r3, r2
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	4413      	add	r3, r2
 8001010:	3b1b      	subs	r3, #27
 8001012:	2207      	movs	r2, #7
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	4019      	ands	r1, r3
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	6898      	ldr	r0, [r3, #8]
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	4613      	mov	r3, r2
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	4413      	add	r3, r2
 800102a:	3b1b      	subs	r3, #27
 800102c:	fa00 f203 	lsl.w	r2, r0, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	430a      	orrs	r2, r1
 8001036:	619a      	str	r2, [r3, #24]
 8001038:	e01b      	b.n	8001072 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	6959      	ldr	r1, [r3, #20]
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	1c5a      	adds	r2, r3, #1
 8001046:	4613      	mov	r3, r2
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	4413      	add	r3, r2
 800104c:	2207      	movs	r2, #7
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43db      	mvns	r3, r3
 8001054:	4019      	ands	r1, r3
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	6898      	ldr	r0, [r3, #8]
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	1c5a      	adds	r2, r3, #1
 8001060:	4613      	mov	r3, r2
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	4413      	add	r3, r2
 8001066:	fa00 f203 	lsl.w	r2, r0, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	430a      	orrs	r2, r1
 8001070:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001072:	4b1f      	ldr	r3, [pc, #124]	@ (80010f0 <HAL_ADC_ConfigChannel+0x480>)
 8001074:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2b10      	cmp	r3, #16
 800107c:	d105      	bne.n	800108a <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800107e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001086:	2b00      	cmp	r3, #0
 8001088:	d015      	beq.n	80010b6 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800108e:	2b11      	cmp	r3, #17
 8001090:	d105      	bne.n	800109e <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001092:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800109a:	2b00      	cmp	r3, #0
 800109c:	d00b      	beq.n	80010b6 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80010a2:	2b12      	cmp	r3, #18
 80010a4:	f040 8091 	bne.w	80011ca <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80010a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	f040 808a 	bne.w	80011ca <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010be:	d102      	bne.n	80010c6 <HAL_ADC_ConfigChannel+0x456>
 80010c0:	4b0c      	ldr	r3, [pc, #48]	@ (80010f4 <HAL_ADC_ConfigChannel+0x484>)
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	e002      	b.n	80010cc <HAL_ADC_ConfigChannel+0x45c>
 80010c6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80010ca:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	f003 0303 	and.w	r3, r3, #3
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d10e      	bne.n	80010f8 <HAL_ADC_ConfigChannel+0x488>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d107      	bne.n	80010f8 <HAL_ADC_ConfigChannel+0x488>
 80010e8:	2301      	movs	r3, #1
 80010ea:	e006      	b.n	80010fa <HAL_ADC_ConfigChannel+0x48a>
 80010ec:	83fff000 	.word	0x83fff000
 80010f0:	50000300 	.word	0x50000300
 80010f4:	50000100 	.word	0x50000100
 80010f8:	2300      	movs	r3, #0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d150      	bne.n	80011a0 <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80010fe:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001100:	2b00      	cmp	r3, #0
 8001102:	d010      	beq.n	8001126 <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	f003 0303 	and.w	r3, r3, #3
 800110c:	2b01      	cmp	r3, #1
 800110e:	d107      	bne.n	8001120 <HAL_ADC_ConfigChannel+0x4b0>
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	2b01      	cmp	r3, #1
 800111a:	d101      	bne.n	8001120 <HAL_ADC_ConfigChannel+0x4b0>
 800111c:	2301      	movs	r3, #1
 800111e:	e000      	b.n	8001122 <HAL_ADC_ConfigChannel+0x4b2>
 8001120:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001122:	2b00      	cmp	r3, #0
 8001124:	d13c      	bne.n	80011a0 <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2b10      	cmp	r3, #16
 800112c:	d11d      	bne.n	800116a <HAL_ADC_ConfigChannel+0x4fa>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001136:	d118      	bne.n	800116a <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001138:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001140:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001142:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001144:	4b27      	ldr	r3, [pc, #156]	@ (80011e4 <HAL_ADC_ConfigChannel+0x574>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a27      	ldr	r2, [pc, #156]	@ (80011e8 <HAL_ADC_ConfigChannel+0x578>)
 800114a:	fba2 2303 	umull	r2, r3, r2, r3
 800114e:	0c9a      	lsrs	r2, r3, #18
 8001150:	4613      	mov	r3, r2
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	4413      	add	r3, r2
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800115a:	e002      	b.n	8001162 <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	3b01      	subs	r3, #1
 8001160:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d1f9      	bne.n	800115c <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001168:	e02e      	b.n	80011c8 <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2b11      	cmp	r3, #17
 8001170:	d10b      	bne.n	800118a <HAL_ADC_ConfigChannel+0x51a>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800117a:	d106      	bne.n	800118a <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800117c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8001184:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001186:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001188:	e01e      	b.n	80011c8 <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2b12      	cmp	r3, #18
 8001190:	d11a      	bne.n	80011c8 <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001192:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800119a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800119c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800119e:	e013      	b.n	80011c8 <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a4:	f043 0220 	orr.w	r2, r3, #32
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80011b2:	e00a      	b.n	80011ca <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b8:	f043 0220 	orr.w	r2, r3, #32
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80011c6:	e000      	b.n	80011ca <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80011c8:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80011d2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	376c      	adds	r7, #108	@ 0x6c
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	20000000 	.word	0x20000000
 80011e8:	431bde83 	.word	0x431bde83

080011ec <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b099      	sub	sp, #100	@ 0x64
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011f6:	2300      	movs	r3, #0
 80011f8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001204:	d102      	bne.n	800120c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001206:	4b5a      	ldr	r3, [pc, #360]	@ (8001370 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	e002      	b.n	8001212 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 800120c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001210:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d101      	bne.n	800121c <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e0a2      	b.n	8001362 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001222:	2b01      	cmp	r3, #1
 8001224:	d101      	bne.n	800122a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001226:	2302      	movs	r3, #2
 8001228:	e09b      	b.n	8001362 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2201      	movs	r2, #1
 800122e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f003 0304 	and.w	r3, r3, #4
 800123c:	2b00      	cmp	r3, #0
 800123e:	d17f      	bne.n	8001340 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	f003 0304 	and.w	r3, r3, #4
 8001248:	2b00      	cmp	r3, #0
 800124a:	d179      	bne.n	8001340 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800124c:	4b49      	ldr	r3, [pc, #292]	@ (8001374 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 800124e:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d040      	beq.n	80012da <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001258:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	6859      	ldr	r1, [r3, #4]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800126a:	035b      	lsls	r3, r3, #13
 800126c:	430b      	orrs	r3, r1
 800126e:	431a      	orrs	r2, r3
 8001270:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001272:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	f003 0303 	and.w	r3, r3, #3
 800127e:	2b01      	cmp	r3, #1
 8001280:	d108      	bne.n	8001294 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0301 	and.w	r3, r3, #1
 800128c:	2b01      	cmp	r3, #1
 800128e:	d101      	bne.n	8001294 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001290:	2301      	movs	r3, #1
 8001292:	e000      	b.n	8001296 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001294:	2300      	movs	r3, #0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d15c      	bne.n	8001354 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	f003 0303 	and.w	r3, r3, #3
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d107      	bne.n	80012b6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d101      	bne.n	80012b6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80012b2:	2301      	movs	r3, #1
 80012b4:	e000      	b.n	80012b8 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 80012b6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d14b      	bne.n	8001354 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80012bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80012c4:	f023 030f 	bic.w	r3, r3, #15
 80012c8:	683a      	ldr	r2, [r7, #0]
 80012ca:	6811      	ldr	r1, [r2, #0]
 80012cc:	683a      	ldr	r2, [r7, #0]
 80012ce:	6892      	ldr	r2, [r2, #8]
 80012d0:	430a      	orrs	r2, r1
 80012d2:	431a      	orrs	r2, r3
 80012d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80012d6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80012d8:	e03c      	b.n	8001354 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80012da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80012e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80012e4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f003 0303 	and.w	r3, r3, #3
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d108      	bne.n	8001306 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d101      	bne.n	8001306 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001302:	2301      	movs	r3, #1
 8001304:	e000      	b.n	8001308 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8001306:	2300      	movs	r3, #0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d123      	bne.n	8001354 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f003 0303 	and.w	r3, r3, #3
 8001314:	2b01      	cmp	r3, #1
 8001316:	d107      	bne.n	8001328 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	2b01      	cmp	r3, #1
 8001322:	d101      	bne.n	8001328 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001324:	2301      	movs	r3, #1
 8001326:	e000      	b.n	800132a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001328:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800132a:	2b00      	cmp	r3, #0
 800132c:	d112      	bne.n	8001354 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800132e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001336:	f023 030f 	bic.w	r3, r3, #15
 800133a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800133c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800133e:	e009      	b.n	8001354 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001344:	f043 0220 	orr.w	r2, r3, #32
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8001352:	e000      	b.n	8001356 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001354:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800135e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8001362:	4618      	mov	r0, r3
 8001364:	3764      	adds	r7, #100	@ 0x64
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	50000100 	.word	0x50000100
 8001374:	50000300 	.word	0x50000300

08001378 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001380:	2300      	movs	r3, #0
 8001382:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	f003 0303 	and.w	r3, r3, #3
 800138e:	2b01      	cmp	r3, #1
 8001390:	d108      	bne.n	80013a4 <ADC_Disable+0x2c>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	2b01      	cmp	r3, #1
 800139e:	d101      	bne.n	80013a4 <ADC_Disable+0x2c>
 80013a0:	2301      	movs	r3, #1
 80013a2:	e000      	b.n	80013a6 <ADC_Disable+0x2e>
 80013a4:	2300      	movs	r3, #0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d047      	beq.n	800143a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	f003 030d 	and.w	r3, r3, #13
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d10f      	bne.n	80013d8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	689a      	ldr	r2, [r3, #8]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f042 0202 	orr.w	r2, r2, #2
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2203      	movs	r2, #3
 80013ce:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80013d0:	f7ff fab0 	bl	8000934 <HAL_GetTick>
 80013d4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80013d6:	e029      	b.n	800142c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013dc:	f043 0210 	orr.w	r2, r3, #16
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e8:	f043 0201 	orr.w	r2, r3, #1
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e023      	b.n	800143c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80013f4:	f7ff fa9e 	bl	8000934 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d914      	bls.n	800142c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	2b01      	cmp	r3, #1
 800140e:	d10d      	bne.n	800142c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001414:	f043 0210 	orr.w	r2, r3, #16
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001420:	f043 0201 	orr.w	r2, r3, #1
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e007      	b.n	800143c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	2b01      	cmp	r3, #1
 8001438:	d0dc      	beq.n	80013f4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800143a:	2300      	movs	r3, #0
}
 800143c:	4618      	mov	r0, r3
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f003 0307 	and.w	r3, r3, #7
 8001452:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001454:	4b0c      	ldr	r3, [pc, #48]	@ (8001488 <__NVIC_SetPriorityGrouping+0x44>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800145a:	68ba      	ldr	r2, [r7, #8]
 800145c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001460:	4013      	ands	r3, r2
 8001462:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800146c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001470:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001474:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001476:	4a04      	ldr	r2, [pc, #16]	@ (8001488 <__NVIC_SetPriorityGrouping+0x44>)
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	60d3      	str	r3, [r2, #12]
}
 800147c:	bf00      	nop
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001490:	4b04      	ldr	r3, [pc, #16]	@ (80014a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	0a1b      	lsrs	r3, r3, #8
 8001496:	f003 0307 	and.w	r3, r3, #7
}
 800149a:	4618      	mov	r0, r3
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	6039      	str	r1, [r7, #0]
 80014b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	db0a      	blt.n	80014d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	490c      	ldr	r1, [pc, #48]	@ (80014f4 <__NVIC_SetPriority+0x4c>)
 80014c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c6:	0112      	lsls	r2, r2, #4
 80014c8:	b2d2      	uxtb	r2, r2
 80014ca:	440b      	add	r3, r1
 80014cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d0:	e00a      	b.n	80014e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	4908      	ldr	r1, [pc, #32]	@ (80014f8 <__NVIC_SetPriority+0x50>)
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	f003 030f 	and.w	r3, r3, #15
 80014de:	3b04      	subs	r3, #4
 80014e0:	0112      	lsls	r2, r2, #4
 80014e2:	b2d2      	uxtb	r2, r2
 80014e4:	440b      	add	r3, r1
 80014e6:	761a      	strb	r2, [r3, #24]
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	e000e100 	.word	0xe000e100
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b089      	sub	sp, #36	@ 0x24
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	f1c3 0307 	rsb	r3, r3, #7
 8001516:	2b04      	cmp	r3, #4
 8001518:	bf28      	it	cs
 800151a:	2304      	movcs	r3, #4
 800151c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	3304      	adds	r3, #4
 8001522:	2b06      	cmp	r3, #6
 8001524:	d902      	bls.n	800152c <NVIC_EncodePriority+0x30>
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	3b03      	subs	r3, #3
 800152a:	e000      	b.n	800152e <NVIC_EncodePriority+0x32>
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001530:	f04f 32ff 	mov.w	r2, #4294967295
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43da      	mvns	r2, r3
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	401a      	ands	r2, r3
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001544:	f04f 31ff 	mov.w	r1, #4294967295
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	fa01 f303 	lsl.w	r3, r1, r3
 800154e:	43d9      	mvns	r1, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001554:	4313      	orrs	r3, r2
         );
}
 8001556:	4618      	mov	r0, r3
 8001558:	3724      	adds	r7, #36	@ 0x24
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
	...

08001564 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3b01      	subs	r3, #1
 8001570:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001574:	d301      	bcc.n	800157a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001576:	2301      	movs	r3, #1
 8001578:	e00f      	b.n	800159a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800157a:	4a0a      	ldr	r2, [pc, #40]	@ (80015a4 <SysTick_Config+0x40>)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3b01      	subs	r3, #1
 8001580:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001582:	210f      	movs	r1, #15
 8001584:	f04f 30ff 	mov.w	r0, #4294967295
 8001588:	f7ff ff8e 	bl	80014a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800158c:	4b05      	ldr	r3, [pc, #20]	@ (80015a4 <SysTick_Config+0x40>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001592:	4b04      	ldr	r3, [pc, #16]	@ (80015a4 <SysTick_Config+0x40>)
 8001594:	2207      	movs	r2, #7
 8001596:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	e000e010 	.word	0xe000e010

080015a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff ff47 	bl	8001444 <__NVIC_SetPriorityGrouping>
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b086      	sub	sp, #24
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	4603      	mov	r3, r0
 80015c6:	60b9      	str	r1, [r7, #8]
 80015c8:	607a      	str	r2, [r7, #4]
 80015ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015d0:	f7ff ff5c 	bl	800148c <__NVIC_GetPriorityGrouping>
 80015d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	68b9      	ldr	r1, [r7, #8]
 80015da:	6978      	ldr	r0, [r7, #20]
 80015dc:	f7ff ff8e 	bl	80014fc <NVIC_EncodePriority>
 80015e0:	4602      	mov	r2, r0
 80015e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e6:	4611      	mov	r1, r2
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff ff5d 	bl	80014a8 <__NVIC_SetPriority>
}
 80015ee:	bf00      	nop
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff ffb0 	bl	8001564 <SysTick_Config>
 8001604:	4603      	mov	r3, r0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001610:	b480      	push	{r7}
 8001612:	b087      	sub	sp, #28
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800161a:	2300      	movs	r3, #0
 800161c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800161e:	e14e      	b.n	80018be <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	2101      	movs	r1, #1
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	fa01 f303 	lsl.w	r3, r1, r3
 800162c:	4013      	ands	r3, r2
 800162e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2b00      	cmp	r3, #0
 8001634:	f000 8140 	beq.w	80018b8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 0303 	and.w	r3, r3, #3
 8001640:	2b01      	cmp	r3, #1
 8001642:	d005      	beq.n	8001650 <HAL_GPIO_Init+0x40>
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f003 0303 	and.w	r3, r3, #3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d130      	bne.n	80016b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	2203      	movs	r2, #3
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	43db      	mvns	r3, r3
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	4013      	ands	r3, r2
 8001666:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	68da      	ldr	r2, [r3, #12]
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	4313      	orrs	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001686:	2201      	movs	r2, #1
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43db      	mvns	r3, r3
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	4013      	ands	r3, r2
 8001694:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	091b      	lsrs	r3, r3, #4
 800169c:	f003 0201 	and.w	r2, r3, #1
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f003 0303 	and.w	r3, r3, #3
 80016ba:	2b03      	cmp	r3, #3
 80016bc:	d017      	beq.n	80016ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	2203      	movs	r2, #3
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43db      	mvns	r3, r3
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	4013      	ands	r3, r2
 80016d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	689a      	ldr	r2, [r3, #8]
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f003 0303 	and.w	r3, r3, #3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d123      	bne.n	8001742 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	08da      	lsrs	r2, r3, #3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	3208      	adds	r2, #8
 8001702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001706:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	f003 0307 	and.w	r3, r3, #7
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	220f      	movs	r2, #15
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43db      	mvns	r3, r3
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	4013      	ands	r3, r2
 800171c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	691a      	ldr	r2, [r3, #16]
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	f003 0307 	and.w	r3, r3, #7
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	4313      	orrs	r3, r2
 8001732:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	08da      	lsrs	r2, r3, #3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3208      	adds	r2, #8
 800173c:	6939      	ldr	r1, [r7, #16]
 800173e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	2203      	movs	r2, #3
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	43db      	mvns	r3, r3
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	4013      	ands	r3, r2
 8001758:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f003 0203 	and.w	r2, r3, #3
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	4313      	orrs	r3, r2
 800176e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 809a 	beq.w	80018b8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001784:	4b55      	ldr	r3, [pc, #340]	@ (80018dc <HAL_GPIO_Init+0x2cc>)
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	4a54      	ldr	r2, [pc, #336]	@ (80018dc <HAL_GPIO_Init+0x2cc>)
 800178a:	f043 0301 	orr.w	r3, r3, #1
 800178e:	6193      	str	r3, [r2, #24]
 8001790:	4b52      	ldr	r3, [pc, #328]	@ (80018dc <HAL_GPIO_Init+0x2cc>)
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800179c:	4a50      	ldr	r2, [pc, #320]	@ (80018e0 <HAL_GPIO_Init+0x2d0>)
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	089b      	lsrs	r3, r3, #2
 80017a2:	3302      	adds	r3, #2
 80017a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	f003 0303 	and.w	r3, r3, #3
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	220f      	movs	r2, #15
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	43db      	mvns	r3, r3
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	4013      	ands	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80017c6:	d013      	beq.n	80017f0 <HAL_GPIO_Init+0x1e0>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4a46      	ldr	r2, [pc, #280]	@ (80018e4 <HAL_GPIO_Init+0x2d4>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d00d      	beq.n	80017ec <HAL_GPIO_Init+0x1dc>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4a45      	ldr	r2, [pc, #276]	@ (80018e8 <HAL_GPIO_Init+0x2d8>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d007      	beq.n	80017e8 <HAL_GPIO_Init+0x1d8>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4a44      	ldr	r2, [pc, #272]	@ (80018ec <HAL_GPIO_Init+0x2dc>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d101      	bne.n	80017e4 <HAL_GPIO_Init+0x1d4>
 80017e0:	2303      	movs	r3, #3
 80017e2:	e006      	b.n	80017f2 <HAL_GPIO_Init+0x1e2>
 80017e4:	2305      	movs	r3, #5
 80017e6:	e004      	b.n	80017f2 <HAL_GPIO_Init+0x1e2>
 80017e8:	2302      	movs	r3, #2
 80017ea:	e002      	b.n	80017f2 <HAL_GPIO_Init+0x1e2>
 80017ec:	2301      	movs	r3, #1
 80017ee:	e000      	b.n	80017f2 <HAL_GPIO_Init+0x1e2>
 80017f0:	2300      	movs	r3, #0
 80017f2:	697a      	ldr	r2, [r7, #20]
 80017f4:	f002 0203 	and.w	r2, r2, #3
 80017f8:	0092      	lsls	r2, r2, #2
 80017fa:	4093      	lsls	r3, r2
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	4313      	orrs	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001802:	4937      	ldr	r1, [pc, #220]	@ (80018e0 <HAL_GPIO_Init+0x2d0>)
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	089b      	lsrs	r3, r3, #2
 8001808:	3302      	adds	r3, #2
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001810:	4b37      	ldr	r3, [pc, #220]	@ (80018f0 <HAL_GPIO_Init+0x2e0>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	43db      	mvns	r3, r3
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	4013      	ands	r3, r2
 800181e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d003      	beq.n	8001834 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	4313      	orrs	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001834:	4a2e      	ldr	r2, [pc, #184]	@ (80018f0 <HAL_GPIO_Init+0x2e0>)
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800183a:	4b2d      	ldr	r3, [pc, #180]	@ (80018f0 <HAL_GPIO_Init+0x2e0>)
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	43db      	mvns	r3, r3
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	4013      	ands	r3, r2
 8001848:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d003      	beq.n	800185e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	4313      	orrs	r3, r2
 800185c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800185e:	4a24      	ldr	r2, [pc, #144]	@ (80018f0 <HAL_GPIO_Init+0x2e0>)
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001864:	4b22      	ldr	r3, [pc, #136]	@ (80018f0 <HAL_GPIO_Init+0x2e0>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	43db      	mvns	r3, r3
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	4013      	ands	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d003      	beq.n	8001888 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	4313      	orrs	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001888:	4a19      	ldr	r2, [pc, #100]	@ (80018f0 <HAL_GPIO_Init+0x2e0>)
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800188e:	4b18      	ldr	r3, [pc, #96]	@ (80018f0 <HAL_GPIO_Init+0x2e0>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	43db      	mvns	r3, r3
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	4013      	ands	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d003      	beq.n	80018b2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80018b2:	4a0f      	ldr	r2, [pc, #60]	@ (80018f0 <HAL_GPIO_Init+0x2e0>)
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	3301      	adds	r3, #1
 80018bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	fa22 f303 	lsr.w	r3, r2, r3
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	f47f aea9 	bne.w	8001620 <HAL_GPIO_Init+0x10>
  }
}
 80018ce:	bf00      	nop
 80018d0:	bf00      	nop
 80018d2:	371c      	adds	r7, #28
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	40021000 	.word	0x40021000
 80018e0:	40010000 	.word	0x40010000
 80018e4:	48000400 	.word	0x48000400
 80018e8:	48000800 	.word	0x48000800
 80018ec:	48000c00 	.word	0x48000c00
 80018f0:	40010400 	.word	0x40010400

080018f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	460b      	mov	r3, r1
 80018fe:	807b      	strh	r3, [r7, #2]
 8001900:	4613      	mov	r3, r2
 8001902:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001904:	787b      	ldrb	r3, [r7, #1]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800190a:	887a      	ldrh	r2, [r7, #2]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001910:	e002      	b.n	8001918 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001912:	887a      	ldrh	r2, [r7, #2]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e0ba      	b.n	8001aac <HAL_HRTIM_Init+0x188>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2202      	movs	r2, #2
 800193a:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	2b00      	cmp	r3, #0
 8001978:	d02e      	beq.n	80019d8 <HAL_HRTIM_Init+0xb4>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a4d      	ldr	r2, [pc, #308]	@ (8001ab4 <HAL_HRTIM_Init+0x190>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d10b      	bne.n	800199c <HAL_HRTIM_Init+0x78>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8001984:	4b4c      	ldr	r3, [pc, #304]	@ (8001ab8 <HAL_HRTIM_Init+0x194>)
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	4a4b      	ldr	r2, [pc, #300]	@ (8001ab8 <HAL_HRTIM_Init+0x194>)
 800198a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800198e:	6193      	str	r3, [r2, #24]
 8001990:	4b49      	ldr	r3, [pc, #292]	@ (8001ab8 <HAL_HRTIM_Init+0x194>)
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80019aa:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	691b      	ldr	r3, [r3, #16]
 80019b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80019c0:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f7fe fe6f 	bl	80006bc <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d012      	beq.n	8001a10 <HAL_HRTIM_Init+0xec>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80019f8:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8001a20:	2300      	movs	r3, #0
 8001a22:	75fb      	strb	r3, [r7, #23]
 8001a24:	e03e      	b.n	8001aa4 <HAL_HRTIM_Init+0x180>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8001a26:	7dfa      	ldrb	r2, [r7, #23]
 8001a28:	6879      	ldr	r1, [r7, #4]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	1a9b      	subs	r3, r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	440b      	add	r3, r1
 8001a34:	3318      	adds	r3, #24
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8001a3a:	7dfa      	ldrb	r2, [r7, #23]
 8001a3c:	6879      	ldr	r1, [r7, #4]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	00db      	lsls	r3, r3, #3
 8001a42:	1a9b      	subs	r3, r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	440b      	add	r3, r1
 8001a48:	331c      	adds	r3, #28
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8001a4e:	7dfa      	ldrb	r2, [r7, #23]
 8001a50:	6879      	ldr	r1, [r7, #4]
 8001a52:	4613      	mov	r3, r2
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	1a9b      	subs	r3, r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	440b      	add	r3, r1
 8001a5c:	3320      	adds	r3, #32
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8001a62:	7dfa      	ldrb	r2, [r7, #23]
 8001a64:	6879      	ldr	r1, [r7, #4]
 8001a66:	4613      	mov	r3, r2
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	1a9b      	subs	r3, r3, r2
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	440b      	add	r3, r1
 8001a70:	3324      	adds	r3, #36	@ 0x24
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8001a76:	7dfa      	ldrb	r2, [r7, #23]
 8001a78:	6879      	ldr	r1, [r7, #4]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	00db      	lsls	r3, r3, #3
 8001a7e:	1a9b      	subs	r3, r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	440b      	add	r3, r1
 8001a84:	3328      	adds	r3, #40	@ 0x28
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8001a8a:	7dfa      	ldrb	r2, [r7, #23]
 8001a8c:	6879      	ldr	r1, [r7, #4]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	1a9b      	subs	r3, r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	440b      	add	r3, r1
 8001a98:	3330      	adds	r3, #48	@ 0x30
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8001a9e:	7dfb      	ldrb	r3, [r7, #23]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 8001aa4:	7dfb      	ldrb	r3, [r7, #23]
 8001aa6:	2b05      	cmp	r3, #5
 8001aa8:	d9bd      	bls.n	8001a26 <HAL_HRTIM_Init+0x102>
  }

  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3718      	adds	r7, #24
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40017400 	.word	0x40017400
 8001ab8:	40021000 	.word	0x40021000

08001abc <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d101      	bne.n	8001ad8 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	e015      	b.n	8001b04 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2202      	movs	r2, #2
 8001adc:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	2b05      	cmp	r3, #5
 8001ae4:	d104      	bne.n	8001af0 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	f000 f8b2 	bl	8001c52 <HRTIM_MasterBase_Config>
 8001aee:	e004      	b.n	8001afa <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	68b9      	ldr	r1, [r7, #8]
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	f000 f8db 	bl	8001cb0 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2201      	movs	r2, #1
 8001afe:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  return HAL_OK;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3710      	adds	r7, #16
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d101      	bne.n	8001b28 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8001b24:	2302      	movs	r3, #2
 8001b26:	e05f      	b.n	8001be8 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d101      	bne.n	8001b36 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8001b32:	2302      	movs	r3, #2
 8001b34:	e058      	b.n	8001be8 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2202      	movs	r2, #2
 8001b42:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	2b05      	cmp	r3, #5
 8001b4a:	d104      	bne.n	8001b56 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8001b4c:	6879      	ldr	r1, [r7, #4]
 8001b4e:	68f8      	ldr	r0, [r7, #12]
 8001b50:	f000 f8ee 	bl	8001d30 <HRTIM_MasterWaveform_Config>
 8001b54:	e004      	b.n	8001b60 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	68b9      	ldr	r1, [r7, #8]
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	f000 f94e 	bl	8001dfc <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6819      	ldr	r1, [r3, #0]
 8001b64:	68f8      	ldr	r0, [r7, #12]
 8001b66:	68ba      	ldr	r2, [r7, #8]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	1a9b      	subs	r3, r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4403      	add	r3, r0
 8001b72:	3320      	adds	r3, #32
 8001b74:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6859      	ldr	r1, [r3, #4]
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	68ba      	ldr	r2, [r7, #8]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	1a9b      	subs	r3, r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	4403      	add	r3, r0
 8001b88:	3324      	adds	r3, #36	@ 0x24
 8001b8a:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6899      	ldr	r1, [r3, #8]
 8001b90:	68f8      	ldr	r0, [r7, #12]
 8001b92:	68ba      	ldr	r2, [r7, #8]
 8001b94:	4613      	mov	r3, r2
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	1a9b      	subs	r3, r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4403      	add	r3, r0
 8001b9e:	3328      	adds	r3, #40	@ 0x28
 8001ba0:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68d9      	ldr	r1, [r3, #12]
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	68ba      	ldr	r2, [r7, #8]
 8001baa:	4613      	mov	r3, r2
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	1a9b      	subs	r3, r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	4403      	add	r3, r0
 8001bb4:	332c      	adds	r3, #44	@ 0x2c
 8001bb6:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6919      	ldr	r1, [r3, #16]
 8001bbc:	68f8      	ldr	r0, [r7, #12]
 8001bbe:	68ba      	ldr	r2, [r7, #8]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	1a9b      	subs	r3, r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4403      	add	r3, r0
 8001bca:	3330      	adds	r3, #48	@ 0x30
 8001bcc:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8001bce:	68b9      	ldr	r1, [r7, #8]
 8001bd0:	68f8      	ldr	r0, [r7, #12]
 8001bd2:	f000 fb2b 	bl	800222c <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
 8001bfc:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d101      	bne.n	8001c0e <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	e01d      	b.n	8001c4a <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d101      	bne.n	8001c1c <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8001c18:	2302      	movs	r3, #2
 8001c1a:	e016      	b.n	8001c4a <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2202      	movs	r2, #2
 8001c28:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	68b9      	ldr	r1, [r7, #8]
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	f000 fa22 	bl	800207c <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b085      	sub	sp, #20
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
 8001c5a:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f023 0307 	bic.w	r3, r3, #7
 8001c6a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	68fa      	ldr	r2, [r7, #12]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f023 0318 	bic.w	r3, r3, #24
 8001c7c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	6812      	ldr	r2, [r2, #0]
 8001c98:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	6852      	ldr	r2, [r2, #4]
 8001ca2:	619a      	str	r2, [r3, #24]
}
 8001ca4:	bf00      	nop
 8001ca6:	3714      	adds	r7, #20
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b087      	sub	sp, #28
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	01db      	lsls	r3, r3, #7
 8001cc6:	4413      	add	r3, r2
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	f023 0307 	bic.w	r3, r3, #7
 8001cd2:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	697a      	ldr	r2, [r7, #20]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	f023 0318 	bic.w	r3, r3, #24
 8001ce4:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	01db      	lsls	r3, r3, #7
 8001cfa:	4413      	add	r3, r2
 8001cfc:	697a      	ldr	r2, [r7, #20]
 8001cfe:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6819      	ldr	r1, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	01db      	lsls	r3, r3, #7
 8001d0c:	440b      	add	r3, r1
 8001d0e:	3394      	adds	r3, #148	@ 0x94
 8001d10:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	6819      	ldr	r1, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685a      	ldr	r2, [r3, #4]
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	01db      	lsls	r3, r3, #7
 8001d1e:	440b      	add	r3, r1
 8001d20:	3398      	adds	r3, #152	@ 0x98
 8001d22:	601a      	str	r2, [r3, #0]
}
 8001d24:	bf00      	nop
 8001d26:	371c      	adds	r7, #28
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8001d4a:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f023 0320 	bic.w	r3, r3, #32
 8001d52:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	695b      	ldr	r3, [r3, #20]
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001d64:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001d76:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	69db      	ldr	r3, [r3, #28]
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8001d88:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	6a1b      	ldr	r3, [r3, #32]
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8001d9a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8001dac:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	68fa      	ldr	r2, [r7, #12]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8001dc0:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dd2:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dd8:	68ba      	ldr	r2, [r7, #8]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8001df0:	bf00      	nop
 8001df2:	3714      	adds	r7, #20
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b08b      	sub	sp, #44	@ 0x2c
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	01db      	lsls	r3, r3, #7
 8001e12:	4413      	add	r3, r2
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	6811      	ldr	r1, [r2, #0]
 8001e1a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	3301      	adds	r3, #1
 8001e22:	01db      	lsls	r3, r3, #7
 8001e24:	440b      	add	r3, r1
 8001e26:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	01db      	lsls	r3, r3, #7
 8001e32:	4413      	add	r3, r2
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	01db      	lsls	r3, r3, #7
 8001e40:	4413      	add	r3, r2
 8001e42:	33e8      	adds	r3, #232	@ 0xe8
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	01db      	lsls	r3, r3, #7
 8001e50:	4413      	add	r3, r2
 8001e52:	33e4      	adds	r3, #228	@ 0xe4
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8001e60:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8001e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e64:	f023 0320 	bic.w	r3, r3, #32
 8001e68:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e70:	4313      	orrs	r3, r2
 8001e72:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8001e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e76:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001e7a:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e82:	4313      	orrs	r3, r2
 8001e84:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8001e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e88:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001e8c:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e94:	4313      	orrs	r3, r2
 8001e96:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8001e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8001e9e:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eac:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8001eb0:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ebe:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001ec2:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8001ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8001ed4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ede:	d103      	bne.n	8001ee8 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8001ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ee6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001eee:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ef4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8001efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001efc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f00:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0e:	f023 73fc 	bic.w	r3, r3, #33030144	@ 0x1f80000
 8001f12:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	f023 031f 	bic.w	r3, r3, #31
 8001f24:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f2a:	f003 031f 	and.w	r3, r3, #31
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f3a:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d108      	bne.n	8001f60 <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8001f4e:	6a3b      	ldr	r3, [r7, #32]
 8001f50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f54:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5a:	6a3a      	ldr	r2, [r7, #32]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f64:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8001f68:	d004      	beq.n	8001f74 <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f6e:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 8001f72:	d103      	bne.n	8001f7c <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f78:	2b40      	cmp	r3, #64	@ 0x40
 8001f7a:	d108      	bne.n	8001f8e <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8001f7c:	6a3b      	ldr	r3, [r7, #32]
 8001f7e:	f423 53f0 	bic.w	r3, r3, #7680	@ 0x1e00
 8001f82:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f88:	6a3a      	ldr	r2, [r7, #32]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f92:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	2b04      	cmp	r3, #4
 8001f98:	d843      	bhi.n	8002022 <HRTIM_TimingUnitWaveform_Config+0x226>
 8001f9a:	a201      	add	r2, pc, #4	@ (adr r2, 8001fa0 <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8001f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa0:	08001fb5 	.word	0x08001fb5
 8001fa4:	08001fcb 	.word	0x08001fcb
 8001fa8:	08001fe1 	.word	0x08001fe1
 8001fac:	08001ff7 	.word	0x08001ff7
 8001fb0:	0800200d 	.word	0x0800200d
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8001fba:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	69fa      	ldr	r2, [r7, #28]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	61fb      	str	r3, [r7, #28]
      break;
 8001fc8:	e02c      	b.n	8002024 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fd0:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	69fa      	ldr	r2, [r7, #28]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	61fb      	str	r3, [r7, #28]
      break;
 8001fde:	e021      	b.n	8002024 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8001fe6:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	69fa      	ldr	r2, [r7, #28]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	61fb      	str	r3, [r7, #28]
      break;
 8001ff4:	e016      	b.n	8002024 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001ffc:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002002:	011b      	lsls	r3, r3, #4
 8002004:	69fa      	ldr	r2, [r7, #28]
 8002006:	4313      	orrs	r3, r2
 8002008:	61fb      	str	r3, [r7, #28]
      break;
 800200a:	e00b      	b.n	8002024 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002012:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002018:	015b      	lsls	r3, r3, #5
 800201a:	69fa      	ldr	r2, [r7, #28]
 800201c:	4313      	orrs	r3, r2
 800201e:	61fb      	str	r3, [r7, #28]
      break;
 8002020:	e000      	b.n	8002024 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 8002022:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	3301      	adds	r3, #1
 800202c:	01db      	lsls	r3, r3, #7
 800202e:	4413      	add	r3, r2
 8002030:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002032:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	01db      	lsls	r3, r3, #7
 800203c:	4413      	add	r3, r2
 800203e:	33e8      	adds	r3, #232	@ 0xe8
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	01db      	lsls	r3, r3, #7
 800204c:	4413      	add	r3, r2
 800204e:	33e4      	adds	r3, #228	@ 0xe4
 8002050:	6a3a      	ldr	r2, [r7, #32]
 8002052:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	01db      	lsls	r3, r3, #7
 800205c:	4413      	add	r3, r2
 800205e:	33d4      	adds	r3, #212	@ 0xd4
 8002060:	697a      	ldr	r2, [r7, #20]
 8002062:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	69fa      	ldr	r2, [r7, #28]
 800206a:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 800206e:	bf00      	nop
 8002070:	372c      	adds	r7, #44	@ 0x2c
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop

0800207c <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 800207c:	b480      	push	{r7}
 800207e:	b089      	sub	sp, #36	@ 0x24
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
 8002088:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 800208a:	2300      	movs	r3, #0
 800208c:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	01db      	lsls	r3, r3, #7
 8002096:	4413      	add	r3, r2
 8002098:	33e4      	adds	r3, #228	@ 0xe4
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	01db      	lsls	r3, r3, #7
 80020a6:	4413      	add	r3, r2
 80020a8:	33b8      	adds	r3, #184	@ 0xb8
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	617b      	str	r3, [r7, #20]

  switch (Output)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020b4:	d04d      	beq.n	8002152 <HRTIM_OutputConfig+0xd6>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020bc:	d85e      	bhi.n	800217c <HRTIM_OutputConfig+0x100>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020c4:	d032      	beq.n	800212c <HRTIM_OutputConfig+0xb0>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020cc:	d856      	bhi.n	800217c <HRTIM_OutputConfig+0x100>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2b80      	cmp	r3, #128	@ 0x80
 80020d2:	d03e      	beq.n	8002152 <HRTIM_OutputConfig+0xd6>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b80      	cmp	r3, #128	@ 0x80
 80020d8:	d850      	bhi.n	800217c <HRTIM_OutputConfig+0x100>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2b40      	cmp	r3, #64	@ 0x40
 80020de:	d025      	beq.n	800212c <HRTIM_OutputConfig+0xb0>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b40      	cmp	r3, #64	@ 0x40
 80020e4:	d84a      	bhi.n	800217c <HRTIM_OutputConfig+0x100>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d01f      	beq.n	800212c <HRTIM_OutputConfig+0xb0>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d044      	beq.n	800217c <HRTIM_OutputConfig+0x100>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b20      	cmp	r3, #32
 80020f6:	d841      	bhi.n	800217c <HRTIM_OutputConfig+0x100>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d33e      	bcc.n	800217c <HRTIM_OutputConfig+0x100>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	3b02      	subs	r3, #2
 8002102:	2201      	movs	r2, #1
 8002104:	409a      	lsls	r2, r3
 8002106:	4b48      	ldr	r3, [pc, #288]	@ (8002228 <HRTIM_OutputConfig+0x1ac>)
 8002108:	4013      	ands	r3, r2
 800210a:	2b00      	cmp	r3, #0
 800210c:	bf14      	ite	ne
 800210e:	2301      	movne	r3, #1
 8002110:	2300      	moveq	r3, #0
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b00      	cmp	r3, #0
 8002116:	d11c      	bne.n	8002152 <HRTIM_OutputConfig+0xd6>
 8002118:	f244 0304 	movw	r3, #16388	@ 0x4004
 800211c:	4013      	ands	r3, r2
 800211e:	2b00      	cmp	r3, #0
 8002120:	bf14      	ite	ne
 8002122:	2301      	movne	r3, #1
 8002124:	2300      	moveq	r3, #0
 8002126:	b2db      	uxtb	r3, r3
 8002128:	2b00      	cmp	r3, #0
 800212a:	d027      	beq.n	800217c <HRTIM_OutputConfig+0x100>
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6819      	ldr	r1, [r3, #0]
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685a      	ldr	r2, [r3, #4]
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	01db      	lsls	r3, r3, #7
 8002138:	440b      	add	r3, r1
 800213a:	33bc      	adds	r3, #188	@ 0xbc
 800213c:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6819      	ldr	r1, [r3, #0]
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	689a      	ldr	r2, [r3, #8]
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	01db      	lsls	r3, r3, #7
 800214a:	440b      	add	r3, r1
 800214c:	33c0      	adds	r3, #192	@ 0xc0
 800214e:	601a      	str	r2, [r3, #0]
      break;
 8002150:	e015      	b.n	800217e <HRTIM_OutputConfig+0x102>
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6819      	ldr	r1, [r3, #0]
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	01db      	lsls	r3, r3, #7
 800215e:	440b      	add	r3, r1
 8002160:	33c4      	adds	r3, #196	@ 0xc4
 8002162:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6819      	ldr	r1, [r3, #0]
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	01db      	lsls	r3, r3, #7
 8002170:	440b      	add	r3, r1
 8002172:	33c8      	adds	r3, #200	@ 0xc8
 8002174:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8002176:	2310      	movs	r3, #16
 8002178:	61bb      	str	r3, [r7, #24]
      break;
 800217a:	e000      	b.n	800217e <HRTIM_OutputConfig+0x102>
    }

  default:
    break;
 800217c:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 800217e:	22fe      	movs	r2, #254	@ 0xfe
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8002186:	43db      	mvns	r3, r3
 8002188:	69fa      	ldr	r2, [r7, #28]
 800218a:	4013      	ands	r3, r2
 800218c:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	69fa      	ldr	r2, [r7, #28]
 800219a:	4313      	orrs	r3, r2
 800219c:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	68da      	ldr	r2, [r3, #12]
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	69fa      	ldr	r2, [r7, #28]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	691a      	ldr	r2, [r3, #16]
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	69fa      	ldr	r2, [r7, #28]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	695a      	ldr	r2, [r3, #20]
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	69fa      	ldr	r2, [r7, #28]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	699a      	ldr	r2, [r3, #24]
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	69fa      	ldr	r2, [r7, #28]
 80021da:	4313      	orrs	r3, r2
 80021dc:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	2b08      	cmp	r3, #8
 80021e4:	d111      	bne.n	800220a <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d10c      	bne.n	800220a <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d107      	bne.n	800220a <HRTIM_OutputConfig+0x18e>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	69da      	ldr	r2, [r3, #28]
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	69fa      	ldr	r2, [r7, #28]
 8002206:	4313      	orrs	r3, r2
 8002208:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	01db      	lsls	r3, r3, #7
 8002212:	4413      	add	r3, r2
 8002214:	33e4      	adds	r3, #228	@ 0xe4
 8002216:	69fa      	ldr	r2, [r7, #28]
 8002218:	601a      	str	r2, [r3, #0]
}
 800221a:	bf00      	nop
 800221c:	3724      	adds	r7, #36	@ 0x24
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	40000041 	.word	0x40000041

0800222c <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	2b05      	cmp	r3, #5
 800223a:	d851      	bhi.n	80022e0 <HRTIM_ForceRegistersUpdate+0xb4>
 800223c:	a201      	add	r2, pc, #4	@ (adr r2, 8002244 <HRTIM_ForceRegistersUpdate+0x18>)
 800223e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002242:	bf00      	nop
 8002244:	08002273 	.word	0x08002273
 8002248:	08002289 	.word	0x08002289
 800224c:	0800229f 	.word	0x0800229f
 8002250:	080022b5 	.word	0x080022b5
 8002254:	080022cb 	.word	0x080022cb
 8002258:	0800225d 	.word	0x0800225d
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f042 0201 	orr.w	r2, r2, #1
 800226c:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8002270:	e037      	b.n	80022e2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f042 0202 	orr.w	r2, r2, #2
 8002282:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8002286:	e02c      	b.n	80022e2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f042 0204 	orr.w	r2, r2, #4
 8002298:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 800229c:	e021      	b.n	80022e2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f042 0208 	orr.w	r2, r2, #8
 80022ae:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80022b2:	e016      	b.n	80022e2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f042 0210 	orr.w	r2, r2, #16
 80022c4:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80022c8:	e00b      	b.n	80022e2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f042 0220 	orr.w	r2, r2, #32
 80022da:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80022de:	e000      	b.n	80022e2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 80022e0:	bf00      	nop
  }
}
 80022e2:	bf00      	nop
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop

080022f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022fc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002300:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002302:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002306:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d102      	bne.n	8002316 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	f001 b823 	b.w	800335c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002316:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800231a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b00      	cmp	r3, #0
 8002328:	f000 817d 	beq.w	8002626 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800232c:	4bbc      	ldr	r3, [pc, #752]	@ (8002620 <HAL_RCC_OscConfig+0x330>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f003 030c 	and.w	r3, r3, #12
 8002334:	2b04      	cmp	r3, #4
 8002336:	d00c      	beq.n	8002352 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002338:	4bb9      	ldr	r3, [pc, #740]	@ (8002620 <HAL_RCC_OscConfig+0x330>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f003 030c 	and.w	r3, r3, #12
 8002340:	2b08      	cmp	r3, #8
 8002342:	d15c      	bne.n	80023fe <HAL_RCC_OscConfig+0x10e>
 8002344:	4bb6      	ldr	r3, [pc, #728]	@ (8002620 <HAL_RCC_OscConfig+0x330>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800234c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002350:	d155      	bne.n	80023fe <HAL_RCC_OscConfig+0x10e>
 8002352:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002356:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800235e:	fa93 f3a3 	rbit	r3, r3
 8002362:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002366:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800236a:	fab3 f383 	clz	r3, r3
 800236e:	b2db      	uxtb	r3, r3
 8002370:	095b      	lsrs	r3, r3, #5
 8002372:	b2db      	uxtb	r3, r3
 8002374:	f043 0301 	orr.w	r3, r3, #1
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b01      	cmp	r3, #1
 800237c:	d102      	bne.n	8002384 <HAL_RCC_OscConfig+0x94>
 800237e:	4ba8      	ldr	r3, [pc, #672]	@ (8002620 <HAL_RCC_OscConfig+0x330>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	e015      	b.n	80023b0 <HAL_RCC_OscConfig+0xc0>
 8002384:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002388:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002390:	fa93 f3a3 	rbit	r3, r3
 8002394:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002398:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800239c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80023a0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80023a4:	fa93 f3a3 	rbit	r3, r3
 80023a8:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80023ac:	4b9c      	ldr	r3, [pc, #624]	@ (8002620 <HAL_RCC_OscConfig+0x330>)
 80023ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80023b4:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80023b8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80023bc:	fa92 f2a2 	rbit	r2, r2
 80023c0:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80023c4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80023c8:	fab2 f282 	clz	r2, r2
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	f042 0220 	orr.w	r2, r2, #32
 80023d2:	b2d2      	uxtb	r2, r2
 80023d4:	f002 021f 	and.w	r2, r2, #31
 80023d8:	2101      	movs	r1, #1
 80023da:	fa01 f202 	lsl.w	r2, r1, r2
 80023de:	4013      	ands	r3, r2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 811f 	beq.w	8002624 <HAL_RCC_OscConfig+0x334>
 80023e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f040 8116 	bne.w	8002624 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	f000 bfaf 	b.w	800335c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002402:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800240e:	d106      	bne.n	800241e <HAL_RCC_OscConfig+0x12e>
 8002410:	4b83      	ldr	r3, [pc, #524]	@ (8002620 <HAL_RCC_OscConfig+0x330>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a82      	ldr	r2, [pc, #520]	@ (8002620 <HAL_RCC_OscConfig+0x330>)
 8002416:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800241a:	6013      	str	r3, [r2, #0]
 800241c:	e036      	b.n	800248c <HAL_RCC_OscConfig+0x19c>
 800241e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002422:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d10c      	bne.n	8002448 <HAL_RCC_OscConfig+0x158>
 800242e:	4b7c      	ldr	r3, [pc, #496]	@ (8002620 <HAL_RCC_OscConfig+0x330>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a7b      	ldr	r2, [pc, #492]	@ (8002620 <HAL_RCC_OscConfig+0x330>)
 8002434:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002438:	6013      	str	r3, [r2, #0]
 800243a:	4b79      	ldr	r3, [pc, #484]	@ (8002620 <HAL_RCC_OscConfig+0x330>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a78      	ldr	r2, [pc, #480]	@ (8002620 <HAL_RCC_OscConfig+0x330>)
 8002440:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002444:	6013      	str	r3, [r2, #0]
 8002446:	e021      	b.n	800248c <HAL_RCC_OscConfig+0x19c>
 8002448:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800244c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002458:	d10c      	bne.n	8002474 <HAL_RCC_OscConfig+0x184>
 800245a:	4b71      	ldr	r3, [pc, #452]	@ (8002620 <HAL_RCC_OscConfig+0x330>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a70      	ldr	r2, [pc, #448]	@ (8002620 <HAL_RCC_OscConfig+0x330>)
 8002460:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002464:	6013      	str	r3, [r2, #0]
 8002466:	4b6e      	ldr	r3, [pc, #440]	@ (8002620 <HAL_RCC_OscConfig+0x330>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a6d      	ldr	r2, [pc, #436]	@ (8002620 <HAL_RCC_OscConfig+0x330>)
 800246c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002470:	6013      	str	r3, [r2, #0]
 8002472:	e00b      	b.n	800248c <HAL_RCC_OscConfig+0x19c>
 8002474:	4b6a      	ldr	r3, [pc, #424]	@ (8002620 <HAL_RCC_OscConfig+0x330>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a69      	ldr	r2, [pc, #420]	@ (8002620 <HAL_RCC_OscConfig+0x330>)
 800247a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800247e:	6013      	str	r3, [r2, #0]
 8002480:	4b67      	ldr	r3, [pc, #412]	@ (8002620 <HAL_RCC_OscConfig+0x330>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a66      	ldr	r2, [pc, #408]	@ (8002620 <HAL_RCC_OscConfig+0x330>)
 8002486:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800248a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800248c:	4b64      	ldr	r3, [pc, #400]	@ (8002620 <HAL_RCC_OscConfig+0x330>)
 800248e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002490:	f023 020f 	bic.w	r2, r3, #15
 8002494:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002498:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	495f      	ldr	r1, [pc, #380]	@ (8002620 <HAL_RCC_OscConfig+0x330>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d059      	beq.n	800256a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b6:	f7fe fa3d 	bl	8000934 <HAL_GetTick>
 80024ba:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024be:	e00a      	b.n	80024d6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024c0:	f7fe fa38 	bl	8000934 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b64      	cmp	r3, #100	@ 0x64
 80024ce:	d902      	bls.n	80024d6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	f000 bf43 	b.w	800335c <HAL_RCC_OscConfig+0x106c>
 80024d6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024da:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024de:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80024e2:	fa93 f3a3 	rbit	r3, r3
 80024e6:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80024ea:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ee:	fab3 f383 	clz	r3, r3
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	095b      	lsrs	r3, r3, #5
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	f043 0301 	orr.w	r3, r3, #1
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d102      	bne.n	8002508 <HAL_RCC_OscConfig+0x218>
 8002502:	4b47      	ldr	r3, [pc, #284]	@ (8002620 <HAL_RCC_OscConfig+0x330>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	e015      	b.n	8002534 <HAL_RCC_OscConfig+0x244>
 8002508:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800250c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002510:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002514:	fa93 f3a3 	rbit	r3, r3
 8002518:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800251c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002520:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002524:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002528:	fa93 f3a3 	rbit	r3, r3
 800252c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002530:	4b3b      	ldr	r3, [pc, #236]	@ (8002620 <HAL_RCC_OscConfig+0x330>)
 8002532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002534:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002538:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 800253c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002540:	fa92 f2a2 	rbit	r2, r2
 8002544:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002548:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 800254c:	fab2 f282 	clz	r2, r2
 8002550:	b2d2      	uxtb	r2, r2
 8002552:	f042 0220 	orr.w	r2, r2, #32
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	f002 021f 	and.w	r2, r2, #31
 800255c:	2101      	movs	r1, #1
 800255e:	fa01 f202 	lsl.w	r2, r1, r2
 8002562:	4013      	ands	r3, r2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0ab      	beq.n	80024c0 <HAL_RCC_OscConfig+0x1d0>
 8002568:	e05d      	b.n	8002626 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256a:	f7fe f9e3 	bl	8000934 <HAL_GetTick>
 800256e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002572:	e00a      	b.n	800258a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002574:	f7fe f9de 	bl	8000934 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b64      	cmp	r3, #100	@ 0x64
 8002582:	d902      	bls.n	800258a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	f000 bee9 	b.w	800335c <HAL_RCC_OscConfig+0x106c>
 800258a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800258e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002592:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002596:	fa93 f3a3 	rbit	r3, r3
 800259a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800259e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025a2:	fab3 f383 	clz	r3, r3
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	095b      	lsrs	r3, r3, #5
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	f043 0301 	orr.w	r3, r3, #1
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d102      	bne.n	80025bc <HAL_RCC_OscConfig+0x2cc>
 80025b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002620 <HAL_RCC_OscConfig+0x330>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	e015      	b.n	80025e8 <HAL_RCC_OscConfig+0x2f8>
 80025bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025c0:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80025c8:	fa93 f3a3 	rbit	r3, r3
 80025cc:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80025d0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025d4:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80025d8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80025dc:	fa93 f3a3 	rbit	r3, r3
 80025e0:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80025e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002620 <HAL_RCC_OscConfig+0x330>)
 80025e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80025ec:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80025f0:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80025f4:	fa92 f2a2 	rbit	r2, r2
 80025f8:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80025fc:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002600:	fab2 f282 	clz	r2, r2
 8002604:	b2d2      	uxtb	r2, r2
 8002606:	f042 0220 	orr.w	r2, r2, #32
 800260a:	b2d2      	uxtb	r2, r2
 800260c:	f002 021f 	and.w	r2, r2, #31
 8002610:	2101      	movs	r1, #1
 8002612:	fa01 f202 	lsl.w	r2, r1, r2
 8002616:	4013      	ands	r3, r2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1ab      	bne.n	8002574 <HAL_RCC_OscConfig+0x284>
 800261c:	e003      	b.n	8002626 <HAL_RCC_OscConfig+0x336>
 800261e:	bf00      	nop
 8002620:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002624:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002626:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800262a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	f000 817d 	beq.w	8002936 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800263c:	4ba6      	ldr	r3, [pc, #664]	@ (80028d8 <HAL_RCC_OscConfig+0x5e8>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f003 030c 	and.w	r3, r3, #12
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00b      	beq.n	8002660 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002648:	4ba3      	ldr	r3, [pc, #652]	@ (80028d8 <HAL_RCC_OscConfig+0x5e8>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f003 030c 	and.w	r3, r3, #12
 8002650:	2b08      	cmp	r3, #8
 8002652:	d172      	bne.n	800273a <HAL_RCC_OscConfig+0x44a>
 8002654:	4ba0      	ldr	r3, [pc, #640]	@ (80028d8 <HAL_RCC_OscConfig+0x5e8>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d16c      	bne.n	800273a <HAL_RCC_OscConfig+0x44a>
 8002660:	2302      	movs	r3, #2
 8002662:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002666:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800266a:	fa93 f3a3 	rbit	r3, r3
 800266e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002672:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002676:	fab3 f383 	clz	r3, r3
 800267a:	b2db      	uxtb	r3, r3
 800267c:	095b      	lsrs	r3, r3, #5
 800267e:	b2db      	uxtb	r3, r3
 8002680:	f043 0301 	orr.w	r3, r3, #1
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b01      	cmp	r3, #1
 8002688:	d102      	bne.n	8002690 <HAL_RCC_OscConfig+0x3a0>
 800268a:	4b93      	ldr	r3, [pc, #588]	@ (80028d8 <HAL_RCC_OscConfig+0x5e8>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	e013      	b.n	80026b8 <HAL_RCC_OscConfig+0x3c8>
 8002690:	2302      	movs	r3, #2
 8002692:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002696:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800269a:	fa93 f3a3 	rbit	r3, r3
 800269e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80026a2:	2302      	movs	r3, #2
 80026a4:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80026a8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80026ac:	fa93 f3a3 	rbit	r3, r3
 80026b0:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80026b4:	4b88      	ldr	r3, [pc, #544]	@ (80028d8 <HAL_RCC_OscConfig+0x5e8>)
 80026b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b8:	2202      	movs	r2, #2
 80026ba:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80026be:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80026c2:	fa92 f2a2 	rbit	r2, r2
 80026c6:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80026ca:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80026ce:	fab2 f282 	clz	r2, r2
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	f042 0220 	orr.w	r2, r2, #32
 80026d8:	b2d2      	uxtb	r2, r2
 80026da:	f002 021f 	and.w	r2, r2, #31
 80026de:	2101      	movs	r1, #1
 80026e0:	fa01 f202 	lsl.w	r2, r1, r2
 80026e4:	4013      	ands	r3, r2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00a      	beq.n	8002700 <HAL_RCC_OscConfig+0x410>
 80026ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d002      	beq.n	8002700 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	f000 be2e 	b.w	800335c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002700:	4b75      	ldr	r3, [pc, #468]	@ (80028d8 <HAL_RCC_OscConfig+0x5e8>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002708:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800270c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	21f8      	movs	r1, #248	@ 0xf8
 8002716:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271a:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800271e:	fa91 f1a1 	rbit	r1, r1
 8002722:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002726:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800272a:	fab1 f181 	clz	r1, r1
 800272e:	b2c9      	uxtb	r1, r1
 8002730:	408b      	lsls	r3, r1
 8002732:	4969      	ldr	r1, [pc, #420]	@ (80028d8 <HAL_RCC_OscConfig+0x5e8>)
 8002734:	4313      	orrs	r3, r2
 8002736:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002738:	e0fd      	b.n	8002936 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800273a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800273e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	2b00      	cmp	r3, #0
 8002748:	f000 8088 	beq.w	800285c <HAL_RCC_OscConfig+0x56c>
 800274c:	2301      	movs	r3, #1
 800274e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002752:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002756:	fa93 f3a3 	rbit	r3, r3
 800275a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800275e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002762:	fab3 f383 	clz	r3, r3
 8002766:	b2db      	uxtb	r3, r3
 8002768:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800276c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	461a      	mov	r2, r3
 8002774:	2301      	movs	r3, #1
 8002776:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002778:	f7fe f8dc 	bl	8000934 <HAL_GetTick>
 800277c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002780:	e00a      	b.n	8002798 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002782:	f7fe f8d7 	bl	8000934 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d902      	bls.n	8002798 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	f000 bde2 	b.w	800335c <HAL_RCC_OscConfig+0x106c>
 8002798:	2302      	movs	r3, #2
 800279a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80027a2:	fa93 f3a3 	rbit	r3, r3
 80027a6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80027aa:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ae:	fab3 f383 	clz	r3, r3
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	095b      	lsrs	r3, r3, #5
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	f043 0301 	orr.w	r3, r3, #1
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d102      	bne.n	80027c8 <HAL_RCC_OscConfig+0x4d8>
 80027c2:	4b45      	ldr	r3, [pc, #276]	@ (80028d8 <HAL_RCC_OscConfig+0x5e8>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	e013      	b.n	80027f0 <HAL_RCC_OscConfig+0x500>
 80027c8:	2302      	movs	r3, #2
 80027ca:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ce:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80027d2:	fa93 f3a3 	rbit	r3, r3
 80027d6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80027da:	2302      	movs	r3, #2
 80027dc:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80027e0:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80027e4:	fa93 f3a3 	rbit	r3, r3
 80027e8:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80027ec:	4b3a      	ldr	r3, [pc, #232]	@ (80028d8 <HAL_RCC_OscConfig+0x5e8>)
 80027ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f0:	2202      	movs	r2, #2
 80027f2:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80027f6:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80027fa:	fa92 f2a2 	rbit	r2, r2
 80027fe:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002802:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002806:	fab2 f282 	clz	r2, r2
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	f042 0220 	orr.w	r2, r2, #32
 8002810:	b2d2      	uxtb	r2, r2
 8002812:	f002 021f 	and.w	r2, r2, #31
 8002816:	2101      	movs	r1, #1
 8002818:	fa01 f202 	lsl.w	r2, r1, r2
 800281c:	4013      	ands	r3, r2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d0af      	beq.n	8002782 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002822:	4b2d      	ldr	r3, [pc, #180]	@ (80028d8 <HAL_RCC_OscConfig+0x5e8>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800282a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800282e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	21f8      	movs	r1, #248	@ 0xf8
 8002838:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002840:	fa91 f1a1 	rbit	r1, r1
 8002844:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002848:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 800284c:	fab1 f181 	clz	r1, r1
 8002850:	b2c9      	uxtb	r1, r1
 8002852:	408b      	lsls	r3, r1
 8002854:	4920      	ldr	r1, [pc, #128]	@ (80028d8 <HAL_RCC_OscConfig+0x5e8>)
 8002856:	4313      	orrs	r3, r2
 8002858:	600b      	str	r3, [r1, #0]
 800285a:	e06c      	b.n	8002936 <HAL_RCC_OscConfig+0x646>
 800285c:	2301      	movs	r3, #1
 800285e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002862:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002866:	fa93 f3a3 	rbit	r3, r3
 800286a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800286e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002872:	fab3 f383 	clz	r3, r3
 8002876:	b2db      	uxtb	r3, r3
 8002878:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800287c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	461a      	mov	r2, r3
 8002884:	2300      	movs	r3, #0
 8002886:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002888:	f7fe f854 	bl	8000934 <HAL_GetTick>
 800288c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002890:	e00a      	b.n	80028a8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002892:	f7fe f84f 	bl	8000934 <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d902      	bls.n	80028a8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	f000 bd5a 	b.w	800335c <HAL_RCC_OscConfig+0x106c>
 80028a8:	2302      	movs	r3, #2
 80028aa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ae:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80028b2:	fa93 f3a3 	rbit	r3, r3
 80028b6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80028ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028be:	fab3 f383 	clz	r3, r3
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	095b      	lsrs	r3, r3, #5
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	f043 0301 	orr.w	r3, r3, #1
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d104      	bne.n	80028dc <HAL_RCC_OscConfig+0x5ec>
 80028d2:	4b01      	ldr	r3, [pc, #4]	@ (80028d8 <HAL_RCC_OscConfig+0x5e8>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	e015      	b.n	8002904 <HAL_RCC_OscConfig+0x614>
 80028d8:	40021000 	.word	0x40021000
 80028dc:	2302      	movs	r3, #2
 80028de:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80028e6:	fa93 f3a3 	rbit	r3, r3
 80028ea:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80028ee:	2302      	movs	r3, #2
 80028f0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80028f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80028f8:	fa93 f3a3 	rbit	r3, r3
 80028fc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002900:	4bc8      	ldr	r3, [pc, #800]	@ (8002c24 <HAL_RCC_OscConfig+0x934>)
 8002902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002904:	2202      	movs	r2, #2
 8002906:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800290a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800290e:	fa92 f2a2 	rbit	r2, r2
 8002912:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002916:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800291a:	fab2 f282 	clz	r2, r2
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	f042 0220 	orr.w	r2, r2, #32
 8002924:	b2d2      	uxtb	r2, r2
 8002926:	f002 021f 	and.w	r2, r2, #31
 800292a:	2101      	movs	r1, #1
 800292c:	fa01 f202 	lsl.w	r2, r1, r2
 8002930:	4013      	ands	r3, r2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1ad      	bne.n	8002892 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002936:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800293a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0308 	and.w	r3, r3, #8
 8002946:	2b00      	cmp	r3, #0
 8002948:	f000 8110 	beq.w	8002b6c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800294c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002950:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d079      	beq.n	8002a50 <HAL_RCC_OscConfig+0x760>
 800295c:	2301      	movs	r3, #1
 800295e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002962:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002966:	fa93 f3a3 	rbit	r3, r3
 800296a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800296e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002972:	fab3 f383 	clz	r3, r3
 8002976:	b2db      	uxtb	r3, r3
 8002978:	461a      	mov	r2, r3
 800297a:	4bab      	ldr	r3, [pc, #684]	@ (8002c28 <HAL_RCC_OscConfig+0x938>)
 800297c:	4413      	add	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	461a      	mov	r2, r3
 8002982:	2301      	movs	r3, #1
 8002984:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002986:	f7fd ffd5 	bl	8000934 <HAL_GetTick>
 800298a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800298e:	e00a      	b.n	80029a6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002990:	f7fd ffd0 	bl	8000934 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d902      	bls.n	80029a6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	f000 bcdb 	b.w	800335c <HAL_RCC_OscConfig+0x106c>
 80029a6:	2302      	movs	r3, #2
 80029a8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80029b0:	fa93 f3a3 	rbit	r3, r3
 80029b4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80029b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029bc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80029c0:	2202      	movs	r2, #2
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029c8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	fa93 f2a3 	rbit	r2, r3
 80029d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80029e4:	2202      	movs	r2, #2
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	fa93 f2a3 	rbit	r2, r3
 80029f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029fa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80029fe:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a00:	4b88      	ldr	r3, [pc, #544]	@ (8002c24 <HAL_RCC_OscConfig+0x934>)
 8002a02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a08:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002a0c:	2102      	movs	r1, #2
 8002a0e:	6019      	str	r1, [r3, #0]
 8002a10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a14:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	fa93 f1a3 	rbit	r1, r3
 8002a1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a22:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002a26:	6019      	str	r1, [r3, #0]
  return result;
 8002a28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a2c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	fab3 f383 	clz	r3, r3
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	f003 031f 	and.w	r3, r3, #31
 8002a42:	2101      	movs	r1, #1
 8002a44:	fa01 f303 	lsl.w	r3, r1, r3
 8002a48:	4013      	ands	r3, r2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d0a0      	beq.n	8002990 <HAL_RCC_OscConfig+0x6a0>
 8002a4e:	e08d      	b.n	8002b6c <HAL_RCC_OscConfig+0x87c>
 8002a50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a54:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002a58:	2201      	movs	r2, #1
 8002a5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a60:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	fa93 f2a3 	rbit	r2, r3
 8002a6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a6e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002a72:	601a      	str	r2, [r3, #0]
  return result;
 8002a74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a78:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002a7c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a7e:	fab3 f383 	clz	r3, r3
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	461a      	mov	r2, r3
 8002a86:	4b68      	ldr	r3, [pc, #416]	@ (8002c28 <HAL_RCC_OscConfig+0x938>)
 8002a88:	4413      	add	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	2300      	movs	r3, #0
 8002a90:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a92:	f7fd ff4f 	bl	8000934 <HAL_GetTick>
 8002a96:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a9a:	e00a      	b.n	8002ab2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a9c:	f7fd ff4a 	bl	8000934 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d902      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	f000 bc55 	b.w	800335c <HAL_RCC_OscConfig+0x106c>
 8002ab2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ab6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002aba:	2202      	movs	r2, #2
 8002abc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ac2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	fa93 f2a3 	rbit	r2, r3
 8002acc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ad0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ada:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002ade:	2202      	movs	r2, #2
 8002ae0:	601a      	str	r2, [r3, #0]
 8002ae2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ae6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	fa93 f2a3 	rbit	r2, r3
 8002af0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002af4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002af8:	601a      	str	r2, [r3, #0]
 8002afa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002afe:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002b02:	2202      	movs	r2, #2
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b0a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	fa93 f2a3 	rbit	r2, r3
 8002b14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b18:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002b1c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b1e:	4b41      	ldr	r3, [pc, #260]	@ (8002c24 <HAL_RCC_OscConfig+0x934>)
 8002b20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b26:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002b2a:	2102      	movs	r1, #2
 8002b2c:	6019      	str	r1, [r3, #0]
 8002b2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b32:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	fa93 f1a3 	rbit	r1, r3
 8002b3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b40:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002b44:	6019      	str	r1, [r3, #0]
  return result;
 8002b46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b4a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	fab3 f383 	clz	r3, r3
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	f003 031f 	and.w	r3, r3, #31
 8002b60:	2101      	movs	r1, #1
 8002b62:	fa01 f303 	lsl.w	r3, r1, r3
 8002b66:	4013      	ands	r3, r2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d197      	bne.n	8002a9c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b70:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0304 	and.w	r3, r3, #4
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f000 81a1 	beq.w	8002ec4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b82:	2300      	movs	r3, #0
 8002b84:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b88:	4b26      	ldr	r3, [pc, #152]	@ (8002c24 <HAL_RCC_OscConfig+0x934>)
 8002b8a:	69db      	ldr	r3, [r3, #28]
 8002b8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d116      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b94:	4b23      	ldr	r3, [pc, #140]	@ (8002c24 <HAL_RCC_OscConfig+0x934>)
 8002b96:	69db      	ldr	r3, [r3, #28]
 8002b98:	4a22      	ldr	r2, [pc, #136]	@ (8002c24 <HAL_RCC_OscConfig+0x934>)
 8002b9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b9e:	61d3      	str	r3, [r2, #28]
 8002ba0:	4b20      	ldr	r3, [pc, #128]	@ (8002c24 <HAL_RCC_OscConfig+0x934>)
 8002ba2:	69db      	ldr	r3, [r3, #28]
 8002ba4:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002ba8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bac:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bb6:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002bba:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc2:	4b1a      	ldr	r3, [pc, #104]	@ (8002c2c <HAL_RCC_OscConfig+0x93c>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d11a      	bne.n	8002c04 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bce:	4b17      	ldr	r3, [pc, #92]	@ (8002c2c <HAL_RCC_OscConfig+0x93c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a16      	ldr	r2, [pc, #88]	@ (8002c2c <HAL_RCC_OscConfig+0x93c>)
 8002bd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bd8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bda:	f7fd feab 	bl	8000934 <HAL_GetTick>
 8002bde:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be2:	e009      	b.n	8002bf8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002be4:	f7fd fea6 	bl	8000934 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b64      	cmp	r3, #100	@ 0x64
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e3b1      	b.n	800335c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8002c2c <HAL_RCC_OscConfig+0x93c>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d0ef      	beq.n	8002be4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c08:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d10d      	bne.n	8002c30 <HAL_RCC_OscConfig+0x940>
 8002c14:	4b03      	ldr	r3, [pc, #12]	@ (8002c24 <HAL_RCC_OscConfig+0x934>)
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	4a02      	ldr	r2, [pc, #8]	@ (8002c24 <HAL_RCC_OscConfig+0x934>)
 8002c1a:	f043 0301 	orr.w	r3, r3, #1
 8002c1e:	6213      	str	r3, [r2, #32]
 8002c20:	e03c      	b.n	8002c9c <HAL_RCC_OscConfig+0x9ac>
 8002c22:	bf00      	nop
 8002c24:	40021000 	.word	0x40021000
 8002c28:	10908120 	.word	0x10908120
 8002c2c:	40007000 	.word	0x40007000
 8002c30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c34:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d10c      	bne.n	8002c5a <HAL_RCC_OscConfig+0x96a>
 8002c40:	4bc1      	ldr	r3, [pc, #772]	@ (8002f48 <HAL_RCC_OscConfig+0xc58>)
 8002c42:	6a1b      	ldr	r3, [r3, #32]
 8002c44:	4ac0      	ldr	r2, [pc, #768]	@ (8002f48 <HAL_RCC_OscConfig+0xc58>)
 8002c46:	f023 0301 	bic.w	r3, r3, #1
 8002c4a:	6213      	str	r3, [r2, #32]
 8002c4c:	4bbe      	ldr	r3, [pc, #760]	@ (8002f48 <HAL_RCC_OscConfig+0xc58>)
 8002c4e:	6a1b      	ldr	r3, [r3, #32]
 8002c50:	4abd      	ldr	r2, [pc, #756]	@ (8002f48 <HAL_RCC_OscConfig+0xc58>)
 8002c52:	f023 0304 	bic.w	r3, r3, #4
 8002c56:	6213      	str	r3, [r2, #32]
 8002c58:	e020      	b.n	8002c9c <HAL_RCC_OscConfig+0x9ac>
 8002c5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c5e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	2b05      	cmp	r3, #5
 8002c68:	d10c      	bne.n	8002c84 <HAL_RCC_OscConfig+0x994>
 8002c6a:	4bb7      	ldr	r3, [pc, #732]	@ (8002f48 <HAL_RCC_OscConfig+0xc58>)
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	4ab6      	ldr	r2, [pc, #728]	@ (8002f48 <HAL_RCC_OscConfig+0xc58>)
 8002c70:	f043 0304 	orr.w	r3, r3, #4
 8002c74:	6213      	str	r3, [r2, #32]
 8002c76:	4bb4      	ldr	r3, [pc, #720]	@ (8002f48 <HAL_RCC_OscConfig+0xc58>)
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	4ab3      	ldr	r2, [pc, #716]	@ (8002f48 <HAL_RCC_OscConfig+0xc58>)
 8002c7c:	f043 0301 	orr.w	r3, r3, #1
 8002c80:	6213      	str	r3, [r2, #32]
 8002c82:	e00b      	b.n	8002c9c <HAL_RCC_OscConfig+0x9ac>
 8002c84:	4bb0      	ldr	r3, [pc, #704]	@ (8002f48 <HAL_RCC_OscConfig+0xc58>)
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	4aaf      	ldr	r2, [pc, #700]	@ (8002f48 <HAL_RCC_OscConfig+0xc58>)
 8002c8a:	f023 0301 	bic.w	r3, r3, #1
 8002c8e:	6213      	str	r3, [r2, #32]
 8002c90:	4bad      	ldr	r3, [pc, #692]	@ (8002f48 <HAL_RCC_OscConfig+0xc58>)
 8002c92:	6a1b      	ldr	r3, [r3, #32]
 8002c94:	4aac      	ldr	r2, [pc, #688]	@ (8002f48 <HAL_RCC_OscConfig+0xc58>)
 8002c96:	f023 0304 	bic.w	r3, r3, #4
 8002c9a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ca0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f000 8081 	beq.w	8002db0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cae:	f7fd fe41 	bl	8000934 <HAL_GetTick>
 8002cb2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cb6:	e00b      	b.n	8002cd0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cb8:	f7fd fe3c 	bl	8000934 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e345      	b.n	800335c <HAL_RCC_OscConfig+0x106c>
 8002cd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cd4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002cd8:	2202      	movs	r2, #2
 8002cda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ce0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	fa93 f2a3 	rbit	r2, r3
 8002cea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cee:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cf8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d04:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	fa93 f2a3 	rbit	r2, r3
 8002d0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d12:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002d16:	601a      	str	r2, [r3, #0]
  return result;
 8002d18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d1c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002d20:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d22:	fab3 f383 	clz	r3, r3
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	095b      	lsrs	r3, r3, #5
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	f043 0302 	orr.w	r3, r3, #2
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d102      	bne.n	8002d3c <HAL_RCC_OscConfig+0xa4c>
 8002d36:	4b84      	ldr	r3, [pc, #528]	@ (8002f48 <HAL_RCC_OscConfig+0xc58>)
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	e013      	b.n	8002d64 <HAL_RCC_OscConfig+0xa74>
 8002d3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d40:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002d44:	2202      	movs	r2, #2
 8002d46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d4c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	fa93 f2a3 	rbit	r2, r3
 8002d56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d5a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	4b79      	ldr	r3, [pc, #484]	@ (8002f48 <HAL_RCC_OscConfig+0xc58>)
 8002d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d64:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d68:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002d6c:	2102      	movs	r1, #2
 8002d6e:	6011      	str	r1, [r2, #0]
 8002d70:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d74:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002d78:	6812      	ldr	r2, [r2, #0]
 8002d7a:	fa92 f1a2 	rbit	r1, r2
 8002d7e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d82:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002d86:	6011      	str	r1, [r2, #0]
  return result;
 8002d88:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d8c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002d90:	6812      	ldr	r2, [r2, #0]
 8002d92:	fab2 f282 	clz	r2, r2
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d9c:	b2d2      	uxtb	r2, r2
 8002d9e:	f002 021f 	and.w	r2, r2, #31
 8002da2:	2101      	movs	r1, #1
 8002da4:	fa01 f202 	lsl.w	r2, r1, r2
 8002da8:	4013      	ands	r3, r2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d084      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x9c8>
 8002dae:	e07f      	b.n	8002eb0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002db0:	f7fd fdc0 	bl	8000934 <HAL_GetTick>
 8002db4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002db8:	e00b      	b.n	8002dd2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dba:	f7fd fdbb 	bl	8000934 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e2c4      	b.n	800335c <HAL_RCC_OscConfig+0x106c>
 8002dd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dd6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002dda:	2202      	movs	r2, #2
 8002ddc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002de2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	fa93 f2a3 	rbit	r2, r3
 8002dec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002df0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002df4:	601a      	str	r2, [r3, #0]
 8002df6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dfa:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002dfe:	2202      	movs	r2, #2
 8002e00:	601a      	str	r2, [r3, #0]
 8002e02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e06:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	fa93 f2a3 	rbit	r2, r3
 8002e10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e14:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002e18:	601a      	str	r2, [r3, #0]
  return result;
 8002e1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e1e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002e22:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e24:	fab3 f383 	clz	r3, r3
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	095b      	lsrs	r3, r3, #5
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	f043 0302 	orr.w	r3, r3, #2
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d102      	bne.n	8002e3e <HAL_RCC_OscConfig+0xb4e>
 8002e38:	4b43      	ldr	r3, [pc, #268]	@ (8002f48 <HAL_RCC_OscConfig+0xc58>)
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	e013      	b.n	8002e66 <HAL_RCC_OscConfig+0xb76>
 8002e3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e42:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002e46:	2202      	movs	r2, #2
 8002e48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e4e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	fa93 f2a3 	rbit	r2, r3
 8002e58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e5c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002e60:	601a      	str	r2, [r3, #0]
 8002e62:	4b39      	ldr	r3, [pc, #228]	@ (8002f48 <HAL_RCC_OscConfig+0xc58>)
 8002e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e66:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e6a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002e6e:	2102      	movs	r1, #2
 8002e70:	6011      	str	r1, [r2, #0]
 8002e72:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e76:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002e7a:	6812      	ldr	r2, [r2, #0]
 8002e7c:	fa92 f1a2 	rbit	r1, r2
 8002e80:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e84:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002e88:	6011      	str	r1, [r2, #0]
  return result;
 8002e8a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e8e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002e92:	6812      	ldr	r2, [r2, #0]
 8002e94:	fab2 f282 	clz	r2, r2
 8002e98:	b2d2      	uxtb	r2, r2
 8002e9a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	f002 021f 	and.w	r2, r2, #31
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	fa01 f202 	lsl.w	r2, r1, r2
 8002eaa:	4013      	ands	r3, r2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d184      	bne.n	8002dba <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002eb0:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d105      	bne.n	8002ec4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eb8:	4b23      	ldr	r3, [pc, #140]	@ (8002f48 <HAL_RCC_OscConfig+0xc58>)
 8002eba:	69db      	ldr	r3, [r3, #28]
 8002ebc:	4a22      	ldr	r2, [pc, #136]	@ (8002f48 <HAL_RCC_OscConfig+0xc58>)
 8002ebe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ec2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ec4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ec8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	69db      	ldr	r3, [r3, #28]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f000 8242 	beq.w	800335a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ed6:	4b1c      	ldr	r3, [pc, #112]	@ (8002f48 <HAL_RCC_OscConfig+0xc58>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f003 030c 	and.w	r3, r3, #12
 8002ede:	2b08      	cmp	r3, #8
 8002ee0:	f000 8213 	beq.w	800330a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ee4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ee8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	69db      	ldr	r3, [r3, #28]
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	f040 8162 	bne.w	80031ba <HAL_RCC_OscConfig+0xeca>
 8002ef6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002efa:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002efe:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002f02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f08:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	fa93 f2a3 	rbit	r2, r3
 8002f12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f16:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002f1a:	601a      	str	r2, [r3, #0]
  return result;
 8002f1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f20:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002f24:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f26:	fab3 f383 	clz	r3, r3
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002f30:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	461a      	mov	r2, r3
 8002f38:	2300      	movs	r3, #0
 8002f3a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3c:	f7fd fcfa 	bl	8000934 <HAL_GetTick>
 8002f40:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f44:	e00c      	b.n	8002f60 <HAL_RCC_OscConfig+0xc70>
 8002f46:	bf00      	nop
 8002f48:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f4c:	f7fd fcf2 	bl	8000934 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d901      	bls.n	8002f60 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e1fd      	b.n	800335c <HAL_RCC_OscConfig+0x106c>
 8002f60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f64:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002f68:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f72:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	fa93 f2a3 	rbit	r2, r3
 8002f7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f80:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002f84:	601a      	str	r2, [r3, #0]
  return result;
 8002f86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f8a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002f8e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f90:	fab3 f383 	clz	r3, r3
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	095b      	lsrs	r3, r3, #5
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	f043 0301 	orr.w	r3, r3, #1
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d102      	bne.n	8002faa <HAL_RCC_OscConfig+0xcba>
 8002fa4:	4bb0      	ldr	r3, [pc, #704]	@ (8003268 <HAL_RCC_OscConfig+0xf78>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	e027      	b.n	8002ffa <HAL_RCC_OscConfig+0xd0a>
 8002faa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fae:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002fb2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002fb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fbc:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	fa93 f2a3 	rbit	r2, r3
 8002fc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fca:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fd4:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002fd8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fe2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	fa93 f2a3 	rbit	r2, r3
 8002fec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002ff4:	601a      	str	r2, [r3, #0]
 8002ff6:	4b9c      	ldr	r3, [pc, #624]	@ (8003268 <HAL_RCC_OscConfig+0xf78>)
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ffe:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003002:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003006:	6011      	str	r1, [r2, #0]
 8003008:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800300c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003010:	6812      	ldr	r2, [r2, #0]
 8003012:	fa92 f1a2 	rbit	r1, r2
 8003016:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800301a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800301e:	6011      	str	r1, [r2, #0]
  return result;
 8003020:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003024:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003028:	6812      	ldr	r2, [r2, #0]
 800302a:	fab2 f282 	clz	r2, r2
 800302e:	b2d2      	uxtb	r2, r2
 8003030:	f042 0220 	orr.w	r2, r2, #32
 8003034:	b2d2      	uxtb	r2, r2
 8003036:	f002 021f 	and.w	r2, r2, #31
 800303a:	2101      	movs	r1, #1
 800303c:	fa01 f202 	lsl.w	r2, r1, r2
 8003040:	4013      	ands	r3, r2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d182      	bne.n	8002f4c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003046:	4b88      	ldr	r3, [pc, #544]	@ (8003268 <HAL_RCC_OscConfig+0xf78>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800304e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003052:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800305a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800305e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	430b      	orrs	r3, r1
 8003068:	497f      	ldr	r1, [pc, #508]	@ (8003268 <HAL_RCC_OscConfig+0xf78>)
 800306a:	4313      	orrs	r3, r2
 800306c:	604b      	str	r3, [r1, #4]
 800306e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003072:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003076:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800307a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003080:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	fa93 f2a3 	rbit	r2, r3
 800308a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800308e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003092:	601a      	str	r2, [r3, #0]
  return result;
 8003094:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003098:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800309c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800309e:	fab3 f383 	clz	r3, r3
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80030a8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	461a      	mov	r2, r3
 80030b0:	2301      	movs	r3, #1
 80030b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b4:	f7fd fc3e 	bl	8000934 <HAL_GetTick>
 80030b8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030bc:	e009      	b.n	80030d2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030be:	f7fd fc39 	bl	8000934 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e144      	b.n	800335c <HAL_RCC_OscConfig+0x106c>
 80030d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030d6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80030da:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030e4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	fa93 f2a3 	rbit	r2, r3
 80030ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030f2:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80030f6:	601a      	str	r2, [r3, #0]
  return result;
 80030f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030fc:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003100:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003102:	fab3 f383 	clz	r3, r3
 8003106:	b2db      	uxtb	r3, r3
 8003108:	095b      	lsrs	r3, r3, #5
 800310a:	b2db      	uxtb	r3, r3
 800310c:	f043 0301 	orr.w	r3, r3, #1
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b01      	cmp	r3, #1
 8003114:	d102      	bne.n	800311c <HAL_RCC_OscConfig+0xe2c>
 8003116:	4b54      	ldr	r3, [pc, #336]	@ (8003268 <HAL_RCC_OscConfig+0xf78>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	e027      	b.n	800316c <HAL_RCC_OscConfig+0xe7c>
 800311c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003120:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003124:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003128:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800312e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	fa93 f2a3 	rbit	r2, r3
 8003138:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800313c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003140:	601a      	str	r2, [r3, #0]
 8003142:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003146:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800314a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800314e:	601a      	str	r2, [r3, #0]
 8003150:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003154:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	fa93 f2a3 	rbit	r2, r3
 800315e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003162:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003166:	601a      	str	r2, [r3, #0]
 8003168:	4b3f      	ldr	r3, [pc, #252]	@ (8003268 <HAL_RCC_OscConfig+0xf78>)
 800316a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003170:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003174:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003178:	6011      	str	r1, [r2, #0]
 800317a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800317e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003182:	6812      	ldr	r2, [r2, #0]
 8003184:	fa92 f1a2 	rbit	r1, r2
 8003188:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800318c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003190:	6011      	str	r1, [r2, #0]
  return result;
 8003192:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003196:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800319a:	6812      	ldr	r2, [r2, #0]
 800319c:	fab2 f282 	clz	r2, r2
 80031a0:	b2d2      	uxtb	r2, r2
 80031a2:	f042 0220 	orr.w	r2, r2, #32
 80031a6:	b2d2      	uxtb	r2, r2
 80031a8:	f002 021f 	and.w	r2, r2, #31
 80031ac:	2101      	movs	r1, #1
 80031ae:	fa01 f202 	lsl.w	r2, r1, r2
 80031b2:	4013      	ands	r3, r2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d082      	beq.n	80030be <HAL_RCC_OscConfig+0xdce>
 80031b8:	e0cf      	b.n	800335a <HAL_RCC_OscConfig+0x106a>
 80031ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031be:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80031c2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80031c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031cc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	fa93 f2a3 	rbit	r2, r3
 80031d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031da:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80031de:	601a      	str	r2, [r3, #0]
  return result;
 80031e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031e4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80031e8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ea:	fab3 f383 	clz	r3, r3
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80031f4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	461a      	mov	r2, r3
 80031fc:	2300      	movs	r3, #0
 80031fe:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003200:	f7fd fb98 	bl	8000934 <HAL_GetTick>
 8003204:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003208:	e009      	b.n	800321e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800320a:	f7fd fb93 	bl	8000934 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e09e      	b.n	800335c <HAL_RCC_OscConfig+0x106c>
 800321e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003222:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003226:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800322a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003230:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	fa93 f2a3 	rbit	r2, r3
 800323a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800323e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003242:	601a      	str	r2, [r3, #0]
  return result;
 8003244:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003248:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800324c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800324e:	fab3 f383 	clz	r3, r3
 8003252:	b2db      	uxtb	r3, r3
 8003254:	095b      	lsrs	r3, r3, #5
 8003256:	b2db      	uxtb	r3, r3
 8003258:	f043 0301 	orr.w	r3, r3, #1
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b01      	cmp	r3, #1
 8003260:	d104      	bne.n	800326c <HAL_RCC_OscConfig+0xf7c>
 8003262:	4b01      	ldr	r3, [pc, #4]	@ (8003268 <HAL_RCC_OscConfig+0xf78>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	e029      	b.n	80032bc <HAL_RCC_OscConfig+0xfcc>
 8003268:	40021000 	.word	0x40021000
 800326c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003270:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003274:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003278:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800327e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	fa93 f2a3 	rbit	r2, r3
 8003288:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800328c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003290:	601a      	str	r2, [r3, #0]
 8003292:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003296:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800329a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800329e:	601a      	str	r2, [r3, #0]
 80032a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032a4:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	fa93 f2a3 	rbit	r2, r3
 80032ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032b2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	4b2b      	ldr	r3, [pc, #172]	@ (8003368 <HAL_RCC_OscConfig+0x1078>)
 80032ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032bc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80032c0:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80032c4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80032c8:	6011      	str	r1, [r2, #0]
 80032ca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80032ce:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80032d2:	6812      	ldr	r2, [r2, #0]
 80032d4:	fa92 f1a2 	rbit	r1, r2
 80032d8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80032dc:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80032e0:	6011      	str	r1, [r2, #0]
  return result;
 80032e2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80032e6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80032ea:	6812      	ldr	r2, [r2, #0]
 80032ec:	fab2 f282 	clz	r2, r2
 80032f0:	b2d2      	uxtb	r2, r2
 80032f2:	f042 0220 	orr.w	r2, r2, #32
 80032f6:	b2d2      	uxtb	r2, r2
 80032f8:	f002 021f 	and.w	r2, r2, #31
 80032fc:	2101      	movs	r1, #1
 80032fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003302:	4013      	ands	r3, r2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d180      	bne.n	800320a <HAL_RCC_OscConfig+0xf1a>
 8003308:	e027      	b.n	800335a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800330a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800330e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d101      	bne.n	800331e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e01e      	b.n	800335c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800331e:	4b12      	ldr	r3, [pc, #72]	@ (8003368 <HAL_RCC_OscConfig+0x1078>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003326:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800332a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800332e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003332:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	429a      	cmp	r2, r3
 800333c:	d10b      	bne.n	8003356 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800333e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003342:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003346:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800334a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003352:	429a      	cmp	r2, r3
 8003354:	d001      	beq.n	800335a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e000      	b.n	800335c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	40021000 	.word	0x40021000

0800336c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b09e      	sub	sp, #120	@ 0x78
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003376:	2300      	movs	r3, #0
 8003378:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d101      	bne.n	8003384 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e162      	b.n	800364a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003384:	4b90      	ldr	r3, [pc, #576]	@ (80035c8 <HAL_RCC_ClockConfig+0x25c>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0307 	and.w	r3, r3, #7
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	429a      	cmp	r2, r3
 8003390:	d910      	bls.n	80033b4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003392:	4b8d      	ldr	r3, [pc, #564]	@ (80035c8 <HAL_RCC_ClockConfig+0x25c>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f023 0207 	bic.w	r2, r3, #7
 800339a:	498b      	ldr	r1, [pc, #556]	@ (80035c8 <HAL_RCC_ClockConfig+0x25c>)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	4313      	orrs	r3, r2
 80033a0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033a2:	4b89      	ldr	r3, [pc, #548]	@ (80035c8 <HAL_RCC_ClockConfig+0x25c>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0307 	and.w	r3, r3, #7
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d001      	beq.n	80033b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e14a      	b.n	800364a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0302 	and.w	r3, r3, #2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d008      	beq.n	80033d2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033c0:	4b82      	ldr	r3, [pc, #520]	@ (80035cc <HAL_RCC_ClockConfig+0x260>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	497f      	ldr	r1, [pc, #508]	@ (80035cc <HAL_RCC_ClockConfig+0x260>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 80dc 	beq.w	8003598 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d13c      	bne.n	8003462 <HAL_RCC_ClockConfig+0xf6>
 80033e8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80033ec:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80033f0:	fa93 f3a3 	rbit	r3, r3
 80033f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80033f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033f8:	fab3 f383 	clz	r3, r3
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	095b      	lsrs	r3, r3, #5
 8003400:	b2db      	uxtb	r3, r3
 8003402:	f043 0301 	orr.w	r3, r3, #1
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b01      	cmp	r3, #1
 800340a:	d102      	bne.n	8003412 <HAL_RCC_ClockConfig+0xa6>
 800340c:	4b6f      	ldr	r3, [pc, #444]	@ (80035cc <HAL_RCC_ClockConfig+0x260>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	e00f      	b.n	8003432 <HAL_RCC_ClockConfig+0xc6>
 8003412:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003416:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003418:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800341a:	fa93 f3a3 	rbit	r3, r3
 800341e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003420:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003424:	663b      	str	r3, [r7, #96]	@ 0x60
 8003426:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003428:	fa93 f3a3 	rbit	r3, r3
 800342c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800342e:	4b67      	ldr	r3, [pc, #412]	@ (80035cc <HAL_RCC_ClockConfig+0x260>)
 8003430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003432:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003436:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003438:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800343a:	fa92 f2a2 	rbit	r2, r2
 800343e:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003440:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003442:	fab2 f282 	clz	r2, r2
 8003446:	b2d2      	uxtb	r2, r2
 8003448:	f042 0220 	orr.w	r2, r2, #32
 800344c:	b2d2      	uxtb	r2, r2
 800344e:	f002 021f 	and.w	r2, r2, #31
 8003452:	2101      	movs	r1, #1
 8003454:	fa01 f202 	lsl.w	r2, r1, r2
 8003458:	4013      	ands	r3, r2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d17b      	bne.n	8003556 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e0f3      	b.n	800364a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	2b02      	cmp	r3, #2
 8003468:	d13c      	bne.n	80034e4 <HAL_RCC_ClockConfig+0x178>
 800346a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800346e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003470:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003472:	fa93 f3a3 	rbit	r3, r3
 8003476:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003478:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800347a:	fab3 f383 	clz	r3, r3
 800347e:	b2db      	uxtb	r3, r3
 8003480:	095b      	lsrs	r3, r3, #5
 8003482:	b2db      	uxtb	r3, r3
 8003484:	f043 0301 	orr.w	r3, r3, #1
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b01      	cmp	r3, #1
 800348c:	d102      	bne.n	8003494 <HAL_RCC_ClockConfig+0x128>
 800348e:	4b4f      	ldr	r3, [pc, #316]	@ (80035cc <HAL_RCC_ClockConfig+0x260>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	e00f      	b.n	80034b4 <HAL_RCC_ClockConfig+0x148>
 8003494:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003498:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800349c:	fa93 f3a3 	rbit	r3, r3
 80034a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80034a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80034a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80034a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034aa:	fa93 f3a3 	rbit	r3, r3
 80034ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034b0:	4b46      	ldr	r3, [pc, #280]	@ (80035cc <HAL_RCC_ClockConfig+0x260>)
 80034b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034b8:	63ba      	str	r2, [r7, #56]	@ 0x38
 80034ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80034bc:	fa92 f2a2 	rbit	r2, r2
 80034c0:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80034c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80034c4:	fab2 f282 	clz	r2, r2
 80034c8:	b2d2      	uxtb	r2, r2
 80034ca:	f042 0220 	orr.w	r2, r2, #32
 80034ce:	b2d2      	uxtb	r2, r2
 80034d0:	f002 021f 	and.w	r2, r2, #31
 80034d4:	2101      	movs	r1, #1
 80034d6:	fa01 f202 	lsl.w	r2, r1, r2
 80034da:	4013      	ands	r3, r2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d13a      	bne.n	8003556 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e0b2      	b.n	800364a <HAL_RCC_ClockConfig+0x2de>
 80034e4:	2302      	movs	r3, #2
 80034e6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ea:	fa93 f3a3 	rbit	r3, r3
 80034ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80034f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f2:	fab3 f383 	clz	r3, r3
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	095b      	lsrs	r3, r3, #5
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	f043 0301 	orr.w	r3, r3, #1
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b01      	cmp	r3, #1
 8003504:	d102      	bne.n	800350c <HAL_RCC_ClockConfig+0x1a0>
 8003506:	4b31      	ldr	r3, [pc, #196]	@ (80035cc <HAL_RCC_ClockConfig+0x260>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	e00d      	b.n	8003528 <HAL_RCC_ClockConfig+0x1bc>
 800350c:	2302      	movs	r3, #2
 800350e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003512:	fa93 f3a3 	rbit	r3, r3
 8003516:	627b      	str	r3, [r7, #36]	@ 0x24
 8003518:	2302      	movs	r3, #2
 800351a:	623b      	str	r3, [r7, #32]
 800351c:	6a3b      	ldr	r3, [r7, #32]
 800351e:	fa93 f3a3 	rbit	r3, r3
 8003522:	61fb      	str	r3, [r7, #28]
 8003524:	4b29      	ldr	r3, [pc, #164]	@ (80035cc <HAL_RCC_ClockConfig+0x260>)
 8003526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003528:	2202      	movs	r2, #2
 800352a:	61ba      	str	r2, [r7, #24]
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	fa92 f2a2 	rbit	r2, r2
 8003532:	617a      	str	r2, [r7, #20]
  return result;
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	fab2 f282 	clz	r2, r2
 800353a:	b2d2      	uxtb	r2, r2
 800353c:	f042 0220 	orr.w	r2, r2, #32
 8003540:	b2d2      	uxtb	r2, r2
 8003542:	f002 021f 	and.w	r2, r2, #31
 8003546:	2101      	movs	r1, #1
 8003548:	fa01 f202 	lsl.w	r2, r1, r2
 800354c:	4013      	ands	r3, r2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d101      	bne.n	8003556 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e079      	b.n	800364a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003556:	4b1d      	ldr	r3, [pc, #116]	@ (80035cc <HAL_RCC_ClockConfig+0x260>)
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f023 0203 	bic.w	r2, r3, #3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	491a      	ldr	r1, [pc, #104]	@ (80035cc <HAL_RCC_ClockConfig+0x260>)
 8003564:	4313      	orrs	r3, r2
 8003566:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003568:	f7fd f9e4 	bl	8000934 <HAL_GetTick>
 800356c:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800356e:	e00a      	b.n	8003586 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003570:	f7fd f9e0 	bl	8000934 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800357e:	4293      	cmp	r3, r2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e061      	b.n	800364a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003586:	4b11      	ldr	r3, [pc, #68]	@ (80035cc <HAL_RCC_ClockConfig+0x260>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f003 020c 	and.w	r2, r3, #12
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	429a      	cmp	r2, r3
 8003596:	d1eb      	bne.n	8003570 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003598:	4b0b      	ldr	r3, [pc, #44]	@ (80035c8 <HAL_RCC_ClockConfig+0x25c>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0307 	and.w	r3, r3, #7
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d214      	bcs.n	80035d0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035a6:	4b08      	ldr	r3, [pc, #32]	@ (80035c8 <HAL_RCC_ClockConfig+0x25c>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f023 0207 	bic.w	r2, r3, #7
 80035ae:	4906      	ldr	r1, [pc, #24]	@ (80035c8 <HAL_RCC_ClockConfig+0x25c>)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b6:	4b04      	ldr	r3, [pc, #16]	@ (80035c8 <HAL_RCC_ClockConfig+0x25c>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0307 	and.w	r3, r3, #7
 80035be:	683a      	ldr	r2, [r7, #0]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d005      	beq.n	80035d0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e040      	b.n	800364a <HAL_RCC_ClockConfig+0x2de>
 80035c8:	40022000 	.word	0x40022000
 80035cc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d008      	beq.n	80035ee <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003654 <HAL_RCC_ClockConfig+0x2e8>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	491a      	ldr	r1, [pc, #104]	@ (8003654 <HAL_RCC_ClockConfig+0x2e8>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0308 	and.w	r3, r3, #8
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d009      	beq.n	800360e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035fa:	4b16      	ldr	r3, [pc, #88]	@ (8003654 <HAL_RCC_ClockConfig+0x2e8>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	4912      	ldr	r1, [pc, #72]	@ (8003654 <HAL_RCC_ClockConfig+0x2e8>)
 800360a:	4313      	orrs	r3, r2
 800360c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800360e:	f000 f829 	bl	8003664 <HAL_RCC_GetSysClockFreq>
 8003612:	4601      	mov	r1, r0
 8003614:	4b0f      	ldr	r3, [pc, #60]	@ (8003654 <HAL_RCC_ClockConfig+0x2e8>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800361c:	22f0      	movs	r2, #240	@ 0xf0
 800361e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	fa92 f2a2 	rbit	r2, r2
 8003626:	60fa      	str	r2, [r7, #12]
  return result;
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	fab2 f282 	clz	r2, r2
 800362e:	b2d2      	uxtb	r2, r2
 8003630:	40d3      	lsrs	r3, r2
 8003632:	4a09      	ldr	r2, [pc, #36]	@ (8003658 <HAL_RCC_ClockConfig+0x2ec>)
 8003634:	5cd3      	ldrb	r3, [r2, r3]
 8003636:	fa21 f303 	lsr.w	r3, r1, r3
 800363a:	4a08      	ldr	r2, [pc, #32]	@ (800365c <HAL_RCC_ClockConfig+0x2f0>)
 800363c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800363e:	4b08      	ldr	r3, [pc, #32]	@ (8003660 <HAL_RCC_ClockConfig+0x2f4>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4618      	mov	r0, r3
 8003644:	f7fd f932 	bl	80008ac <HAL_InitTick>
  
  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3778      	adds	r7, #120	@ 0x78
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	40021000 	.word	0x40021000
 8003658:	080039e8 	.word	0x080039e8
 800365c:	20000000 	.word	0x20000000
 8003660:	20000004 	.word	0x20000004

08003664 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003664:	b480      	push	{r7}
 8003666:	b087      	sub	sp, #28
 8003668:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800366a:	2300      	movs	r3, #0
 800366c:	60fb      	str	r3, [r7, #12]
 800366e:	2300      	movs	r3, #0
 8003670:	60bb      	str	r3, [r7, #8]
 8003672:	2300      	movs	r3, #0
 8003674:	617b      	str	r3, [r7, #20]
 8003676:	2300      	movs	r3, #0
 8003678:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800367a:	2300      	movs	r3, #0
 800367c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800367e:	4b1e      	ldr	r3, [pc, #120]	@ (80036f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f003 030c 	and.w	r3, r3, #12
 800368a:	2b04      	cmp	r3, #4
 800368c:	d002      	beq.n	8003694 <HAL_RCC_GetSysClockFreq+0x30>
 800368e:	2b08      	cmp	r3, #8
 8003690:	d003      	beq.n	800369a <HAL_RCC_GetSysClockFreq+0x36>
 8003692:	e026      	b.n	80036e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003694:	4b19      	ldr	r3, [pc, #100]	@ (80036fc <HAL_RCC_GetSysClockFreq+0x98>)
 8003696:	613b      	str	r3, [r7, #16]
      break;
 8003698:	e026      	b.n	80036e8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	0c9b      	lsrs	r3, r3, #18
 800369e:	f003 030f 	and.w	r3, r3, #15
 80036a2:	4a17      	ldr	r2, [pc, #92]	@ (8003700 <HAL_RCC_GetSysClockFreq+0x9c>)
 80036a4:	5cd3      	ldrb	r3, [r2, r3]
 80036a6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80036a8:	4b13      	ldr	r3, [pc, #76]	@ (80036f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80036aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ac:	f003 030f 	and.w	r3, r3, #15
 80036b0:	4a14      	ldr	r2, [pc, #80]	@ (8003704 <HAL_RCC_GetSysClockFreq+0xa0>)
 80036b2:	5cd3      	ldrb	r3, [r2, r3]
 80036b4:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d008      	beq.n	80036d2 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80036c0:	4a0e      	ldr	r2, [pc, #56]	@ (80036fc <HAL_RCC_GetSysClockFreq+0x98>)
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	fb02 f303 	mul.w	r3, r2, r3
 80036ce:	617b      	str	r3, [r7, #20]
 80036d0:	e004      	b.n	80036dc <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a0c      	ldr	r2, [pc, #48]	@ (8003708 <HAL_RCC_GetSysClockFreq+0xa4>)
 80036d6:	fb02 f303 	mul.w	r3, r2, r3
 80036da:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	613b      	str	r3, [r7, #16]
      break;
 80036e0:	e002      	b.n	80036e8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036e2:	4b06      	ldr	r3, [pc, #24]	@ (80036fc <HAL_RCC_GetSysClockFreq+0x98>)
 80036e4:	613b      	str	r3, [r7, #16]
      break;
 80036e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036e8:	693b      	ldr	r3, [r7, #16]
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	371c      	adds	r7, #28
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	40021000 	.word	0x40021000
 80036fc:	007a1200 	.word	0x007a1200
 8003700:	080039f8 	.word	0x080039f8
 8003704:	08003a08 	.word	0x08003a08
 8003708:	003d0900 	.word	0x003d0900

0800370c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b092      	sub	sp, #72	@ 0x48
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003714:	2300      	movs	r3, #0
 8003716:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003718:	2300      	movs	r3, #0
 800371a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800371c:	2300      	movs	r3, #0
 800371e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800372a:	2b00      	cmp	r3, #0
 800372c:	f000 80cd 	beq.w	80038ca <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003730:	4b8e      	ldr	r3, [pc, #568]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003732:	69db      	ldr	r3, [r3, #28]
 8003734:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d10e      	bne.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800373c:	4b8b      	ldr	r3, [pc, #556]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800373e:	69db      	ldr	r3, [r3, #28]
 8003740:	4a8a      	ldr	r2, [pc, #552]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003742:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003746:	61d3      	str	r3, [r2, #28]
 8003748:	4b88      	ldr	r3, [pc, #544]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800374a:	69db      	ldr	r3, [r3, #28]
 800374c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003750:	60bb      	str	r3, [r7, #8]
 8003752:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003754:	2301      	movs	r3, #1
 8003756:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800375a:	4b85      	ldr	r3, [pc, #532]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003762:	2b00      	cmp	r3, #0
 8003764:	d118      	bne.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003766:	4b82      	ldr	r3, [pc, #520]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a81      	ldr	r2, [pc, #516]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800376c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003770:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003772:	f7fd f8df 	bl	8000934 <HAL_GetTick>
 8003776:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003778:	e008      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800377a:	f7fd f8db 	bl	8000934 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	2b64      	cmp	r3, #100	@ 0x64
 8003786:	d901      	bls.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e0ea      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800378c:	4b78      	ldr	r3, [pc, #480]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003794:	2b00      	cmp	r3, #0
 8003796:	d0f0      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003798:	4b74      	ldr	r3, [pc, #464]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800379a:	6a1b      	ldr	r3, [r3, #32]
 800379c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d07d      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d076      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037b6:	4b6d      	ldr	r3, [pc, #436]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80037c4:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037c8:	fa93 f3a3 	rbit	r3, r3
 80037cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80037ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037d0:	fab3 f383 	clz	r3, r3
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	461a      	mov	r2, r3
 80037d8:	4b66      	ldr	r3, [pc, #408]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80037da:	4413      	add	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	461a      	mov	r2, r3
 80037e0:	2301      	movs	r3, #1
 80037e2:	6013      	str	r3, [r2, #0]
 80037e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80037e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037ec:	fa93 f3a3 	rbit	r3, r3
 80037f0:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80037f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037f4:	fab3 f383 	clz	r3, r3
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	461a      	mov	r2, r3
 80037fc:	4b5d      	ldr	r3, [pc, #372]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80037fe:	4413      	add	r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	461a      	mov	r2, r3
 8003804:	2300      	movs	r3, #0
 8003806:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003808:	4a58      	ldr	r2, [pc, #352]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800380a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800380c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800380e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	2b00      	cmp	r3, #0
 8003816:	d045      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003818:	f7fd f88c 	bl	8000934 <HAL_GetTick>
 800381c:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800381e:	e00a      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003820:	f7fd f888 	bl	8000934 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800382e:	4293      	cmp	r3, r2
 8003830:	d901      	bls.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e095      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8003836:	2302      	movs	r3, #2
 8003838:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800383c:	fa93 f3a3 	rbit	r3, r3
 8003840:	627b      	str	r3, [r7, #36]	@ 0x24
 8003842:	2302      	movs	r3, #2
 8003844:	623b      	str	r3, [r7, #32]
 8003846:	6a3b      	ldr	r3, [r7, #32]
 8003848:	fa93 f3a3 	rbit	r3, r3
 800384c:	61fb      	str	r3, [r7, #28]
  return result;
 800384e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003850:	fab3 f383 	clz	r3, r3
 8003854:	b2db      	uxtb	r3, r3
 8003856:	095b      	lsrs	r3, r3, #5
 8003858:	b2db      	uxtb	r3, r3
 800385a:	f043 0302 	orr.w	r3, r3, #2
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b02      	cmp	r3, #2
 8003862:	d102      	bne.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003864:	4b41      	ldr	r3, [pc, #260]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	e007      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800386a:	2302      	movs	r3, #2
 800386c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	fa93 f3a3 	rbit	r3, r3
 8003874:	617b      	str	r3, [r7, #20]
 8003876:	4b3d      	ldr	r3, [pc, #244]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800387a:	2202      	movs	r2, #2
 800387c:	613a      	str	r2, [r7, #16]
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	fa92 f2a2 	rbit	r2, r2
 8003884:	60fa      	str	r2, [r7, #12]
  return result;
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	fab2 f282 	clz	r2, r2
 800388c:	b2d2      	uxtb	r2, r2
 800388e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003892:	b2d2      	uxtb	r2, r2
 8003894:	f002 021f 	and.w	r2, r2, #31
 8003898:	2101      	movs	r1, #1
 800389a:	fa01 f202 	lsl.w	r2, r1, r2
 800389e:	4013      	ands	r3, r2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d0bd      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80038a4:	4b31      	ldr	r3, [pc, #196]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	492e      	ldr	r1, [pc, #184]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80038b6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d105      	bne.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038be:	4b2b      	ldr	r3, [pc, #172]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038c0:	69db      	ldr	r3, [r3, #28]
 80038c2:	4a2a      	ldr	r2, [pc, #168]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038c8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d008      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038d6:	4b25      	ldr	r3, [pc, #148]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038da:	f023 0203 	bic.w	r2, r3, #3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	4922      	ldr	r1, [pc, #136]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0320 	and.w	r3, r3, #32
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d008      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038f4:	4b1d      	ldr	r3, [pc, #116]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f8:	f023 0210 	bic.w	r2, r3, #16
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	491a      	ldr	r1, [pc, #104]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003902:	4313      	orrs	r3, r2
 8003904:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800390e:	2b00      	cmp	r3, #0
 8003910:	d008      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003912:	4b16      	ldr	r3, [pc, #88]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003916:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	4913      	ldr	r1, [pc, #76]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003920:	4313      	orrs	r3, r2
 8003922:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d008      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003930:	4b0e      	ldr	r3, [pc, #56]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003934:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	695b      	ldr	r3, [r3, #20]
 800393c:	490b      	ldr	r1, [pc, #44]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800393e:	4313      	orrs	r3, r2
 8003940:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d008      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800394e:	4b07      	ldr	r3, [pc, #28]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003952:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	4904      	ldr	r1, [pc, #16]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800395c:	4313      	orrs	r3, r2
 800395e:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3748      	adds	r7, #72	@ 0x48
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	40021000 	.word	0x40021000
 8003970:	40007000 	.word	0x40007000
 8003974:	10908100 	.word	0x10908100

08003978 <memset>:
 8003978:	4402      	add	r2, r0
 800397a:	4603      	mov	r3, r0
 800397c:	4293      	cmp	r3, r2
 800397e:	d100      	bne.n	8003982 <memset+0xa>
 8003980:	4770      	bx	lr
 8003982:	f803 1b01 	strb.w	r1, [r3], #1
 8003986:	e7f9      	b.n	800397c <memset+0x4>

08003988 <__libc_init_array>:
 8003988:	b570      	push	{r4, r5, r6, lr}
 800398a:	4d0d      	ldr	r5, [pc, #52]	@ (80039c0 <__libc_init_array+0x38>)
 800398c:	4c0d      	ldr	r4, [pc, #52]	@ (80039c4 <__libc_init_array+0x3c>)
 800398e:	1b64      	subs	r4, r4, r5
 8003990:	10a4      	asrs	r4, r4, #2
 8003992:	2600      	movs	r6, #0
 8003994:	42a6      	cmp	r6, r4
 8003996:	d109      	bne.n	80039ac <__libc_init_array+0x24>
 8003998:	4d0b      	ldr	r5, [pc, #44]	@ (80039c8 <__libc_init_array+0x40>)
 800399a:	4c0c      	ldr	r4, [pc, #48]	@ (80039cc <__libc_init_array+0x44>)
 800399c:	f000 f818 	bl	80039d0 <_init>
 80039a0:	1b64      	subs	r4, r4, r5
 80039a2:	10a4      	asrs	r4, r4, #2
 80039a4:	2600      	movs	r6, #0
 80039a6:	42a6      	cmp	r6, r4
 80039a8:	d105      	bne.n	80039b6 <__libc_init_array+0x2e>
 80039aa:	bd70      	pop	{r4, r5, r6, pc}
 80039ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80039b0:	4798      	blx	r3
 80039b2:	3601      	adds	r6, #1
 80039b4:	e7ee      	b.n	8003994 <__libc_init_array+0xc>
 80039b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80039ba:	4798      	blx	r3
 80039bc:	3601      	adds	r6, #1
 80039be:	e7f2      	b.n	80039a6 <__libc_init_array+0x1e>
 80039c0:	08003a18 	.word	0x08003a18
 80039c4:	08003a18 	.word	0x08003a18
 80039c8:	08003a18 	.word	0x08003a18
 80039cc:	08003a1c 	.word	0x08003a1c

080039d0 <_init>:
 80039d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039d2:	bf00      	nop
 80039d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039d6:	bc08      	pop	{r3}
 80039d8:	469e      	mov	lr, r3
 80039da:	4770      	bx	lr

080039dc <_fini>:
 80039dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039de:	bf00      	nop
 80039e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039e2:	bc08      	pop	{r3}
 80039e4:	469e      	mov	lr, r3
 80039e6:	4770      	bx	lr
